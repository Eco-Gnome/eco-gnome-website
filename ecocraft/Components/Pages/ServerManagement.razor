@page "/server-management"
<!-- attribute [Authorize(Policy = "IsServerAdmin")]  Don't use this attribute until we setup authentication in the backend, based on cookie and not local storage -->
@implements IDisposable
@using ecocraft.Models
@using ecocraft.Extensions
@using ecocraft.Services
@using ecocraft.Services.ImportData
@using ecocraft.Services.DbServices
@inject ImportDataService ImportDataService
@inject ContextService ContextService
@inject NavigationManager Navigation
@inject ServerDbService ServerDbService
@inject EcoCraftDbContext EcoCraftDbContext
@inject ServerDataService ServerDataService
@inject UserServerDataService UserServerDataService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<PageTitle>Server Management</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
	<MudGrid Style="height: auto">
		<MudItem sm="6">
			<MudPaper Style="height: 100%">
				<MudPaper Class="pa-2 pl-4 border-5 d-flex align-center"
				          Style="width: 100%; height: 45px; background-color: #303038 !important; border-radius: var(--mud-default-borderradius) 0px 0px 0px;
				           border-bottom: 1px solid var(--mud-palette-table-lines)"
				          Elevation="0">
					<MudText>Server Settings</MudText>
				</MudPaper>
				<MudStack Class="pa-4">
					<MudStack Row>
						<MudTextField Value="ContextService.CurrentServer!.Name" Label="Server name" Variant="Variant.Outlined" ValueChanged="(string newServerName) => OnServerNameChanged(ContextService.CurrentUserServer!, newServerName)"/>
						<MudTextField Class="flex-no-grow"
						              ReadOnly						             
						              Value="@ContextService.CurrentServer!.JoinCode"
						              Label="Join code"
						              Adornment="Adornment.End"
						              AdornmentColor="Color.Tertiary"
						              AdornmentIcon="@Icons.Material.Filled.Refresh"
						              OnAdornmentClick="@(() => UpdateJoinCode(ContextService.CurrentUserServer!))"
						              Variant="Variant.Outlined" />
					</MudStack>
					<MudStack Row Class="flex-no-grow" AlignItems="AlignItems.Center" Spacing="6">
						<MudStack Spacing="0">
							<MudText>Recipes: @ServerDataService.Recipes.Count / Elements: @ServerDataService.Recipes.SelectMany(r => r.Elements).Count()</MudText>
							<MudText>Items: @ServerDataService.ItemOrTags.Where(i => !i.IsTag).Count() / Tags: @ServerDataService.ItemOrTags.Where(i => i.IsTag).Count()</MudText>
							<MudText>Skills: @ServerDataService.Skills.Count(s => s.Profession is not null)</MudText>
							<MudText>Crafting Tables: @ServerDataService.CraftingTables.Count</MudText>
							<MudText>Modules: @ServerDataService.PluginModules.Count</MudText>
						</MudStack>
						<MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
							<ActivatorContent>
								<MudButton Disabled="_showUploadServerDataLoader"
								           Variant="Variant.Filled"
								           Color="Color.Primary"
								           StartIcon="@Icons.Material.Filled.CloudUpload">
									Upload Server Data
									@if (_showUploadServerDataLoader)
									{
										<MudProgressCircular Size="Size.Small" Color="Color.Primary" Indeterminate="true" Class="ml-2"/>
									}
								</MudButton>
							</ActivatorContent>
						</MudFileUpload>
					</MudStack>
					<MudStack Row Justify="Justify.FlexEnd">
						<MudButton HtmlTag="label"
						           Disabled="_showDeleteServerLoader"
						           Variant="Variant.Filled"
						           Color="Color.Error"
						           StartIcon="@Icons.Material.Filled.DeleteForever"
						           OnClick="DeleteServer">
							Delete Server
							@if (_showDeleteServerLoader)
							{
								<MudProgressCircular Size="Size.Small" Color="Color.Error" Indeterminate="true" Class="ml-2"/>
							}
						</MudButton>
						@if (_askDeleteConfirmation)
						{
							<MudButton Variant="Variant.Filled"
							           Color="Color.Success"
							           StartIcon="@Icons.Material.Filled.Close"
							           OnClick="CancelDeleteServer" />
							<MudButton Variant="Variant.Filled"
							           Color="Color.Warning"
							           StartIcon="@Icons.Material.Filled.Check"
							           OnClick="ConfirmDeleteServer" />
						}
					</MudStack>
				</MudStack>
			</MudPaper>
		</MudItem>
		<MudItem sm="6">
			<MudTable Items="GetUserServers()"
			          Filter="new Func<UserServer,bool>(FilterPseudo)"
			          FixedHeader="true"
			          Height="300px"
			          Dense="true">
				<HeaderContent>
					<MudTh>
						<MudStack Row AlignItems="AlignItems.Center">
							<MudText>Members</MudText>
							<MudTextField @bind-Value="_searchPseudo" Immediate Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
						</MudStack>
					</MudTh>
					<MudTh></MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTd>
						<MudStack Row AlignItems="AlignItems.Center">
							<MudTooltip Text="Admin">
								<MudIcon Class="mt-1" Icon="@Icons.Material.Filled.VerifiedUser" Size="Size.Small"></MudIcon>
							</MudTooltip>
							<MudText Typo="Typo.body2">@context.Pseudo</MudText>
						</MudStack>
					</MudTd>
					<MudTd>
						<MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexEnd" Spacing="3">
							@if (context != ContextService.CurrentUserServer)
							{
								<MudButton Variant="Variant.Filled"
								           Color="@(context.IsAdmin ? Color.Warning : Color.Error)"
								           StartIcon="@(context.IsAdmin ? Icons.Material.Filled.KeyboardDoubleArrowDown : Icons.Material.Filled.KeyboardDoubleArrowUp)"
								           OnClick="@(() => ToggleAdmin(context))">
									@(context.IsAdmin ? "Demote Admin" : "Promote Admin")
								</MudButton>
							}

							@if (context != ContextService.CurrentUserServer)
							{
								<MudButton HtmlTag="label"
								           Variant="Variant.Filled"
								           Color="Color.Primary"
								           StartIcon="@Icons.Material.Filled.ExitToApp"
								           OnClick="@(() => KickUser(context))">
									Kick User
								</MudButton>
								@if (_askKickConfirmations.ContainsKey(context))
								{
									<br/>
									<MudButton Variant="Variant.Filled"
									           Color="Color.Success"
									           StartIcon="@Icons.Material.Filled.Close"
									           OnClick="@(() => CancelKick(context))">
									</MudButton>
									<MudButton Variant="Variant.Filled"
									           Color="Color.Warning"
									           StartIcon="@Icons.Material.Filled.Check"
									           OnClick="@(() => ConfirmKick(context))">
									</MudButton>
								}
							}
						</MudStack>
					</MudTd>
				</RowTemplate>
				<PagerContent>
					<MudTablePager PageSizeOptions="new []{10, 25, 50}" />
				</PagerContent>
			</MudTable>
		</MudItem>
		<MudItem sm="4">
			<MudTable Items="@GetTags()"
			          Filter="new Func<ItemOrTag,bool>(FilterTag)"
			          Virtualize="false"
			          FixedHeader="true"
			          Height="700px"
			          Dense="true"
			          Hover="true">
				<HeaderContent>
					<MudTh>
						<MudStack Row AlignItems="AlignItems.Center">
							Name
							<MudTextField @bind-Value="_searchTag" Immediate Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
						</MudStack>
					</MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTd>
						<MudStack Row AlignItems="AlignItems.Center" Spacing="2">
							<MudLink OnClick="@(() => ToggleTag(context))">
								<MudText Typo="Typo.body2">
									@ContextService.GetTranslation(context) (@context.AssociatedItems.Count)
								</MudText>
							</MudLink>
							@if (_selectedTag == context)
							{
								<MudIconButton Class="pa-0"
								               Color="Color.Primary"
								               Icon="@Icons.Material.Filled.Clear"
								               Size="Size.Small"
								               OnClick="@(() => ToggleTag(context))" />
							}
						</MudStack>
					</MudTd>
				</RowTemplate>
				<PagerContent>
					<MudTablePager PageSizeOptions="new []{25, 50, 100, 200}" />
				</PagerContent>
			</MudTable>
		</MudItem>
		<MudItem sm="8">
			<MudTable Items="@GetItems()" Filter="new Func<ItemOrTag,bool>(FilterItem)" Virtualize="false" FixedHeader="true" Height="700px" Dense="true" Hover="true">
				<HeaderContent>
					<MudTh>
						<MudStack Row AlignItems="AlignItems.Center">
							<MudText>Name</MudText>
							<MudTextField @bind-Value="_searchItem" Immediate Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
						</MudStack>
					</MudTh>
					<MudTh>
						<MudStack Row>
							<MudText>Min price</MudText>
							<MudTooltip Text="Clear min prices">
								<MudIconButton Icon="@Icons.Material.Filled.ClearAll"
								               OnClick="@(() => OnClearMinPrices(GetItems()))"
								               Color="Color.Primary"
								               Size="Size.Small"/>
							</MudTooltip>
						</MudStack>
					</MudTh>
					<MudTh>Max price
						<MudTooltip Text="Clear max prices">
							<MudIconButton Icon="@Icons.Material.Filled.ClearAll"
							               OnClick="@(() => OnClearMaxPrices(GetItems()))"
							               Color="Color.Primary"
							               Size="Size.Small" />
						</MudTooltip>
					</MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTd>
						<MudText Typo="Typo.body2">@ContextService.GetTranslation(context)</MudText>
					</MudTd>
					<MudTd>
						<MudNumericField T="float?"
						                 Class="rectangle-input"
						                 Disabled="@(context.IsTag)"
						                 HideSpinButtons="@(context.IsTag)"
						                 Value="context.MinPrice"
						                 Format="F2"
						                 Variant="Variant.Outlined"
						                 ValueChanged="@(value => OnMinValueChange(context,value))" />
					</MudTd>
					<MudTd>
						<MudNumericField T="float?"
						                 Class="rectangle-input"
						                 Disabled="@(context.IsTag)"
						                 HideSpinButtons="@(context.IsTag)"
						                 Value="context.MaxPrice"
						                 Format="F2"
						                 Variant="Variant.Outlined"
						                 ValueChanged="@(value => OnMaxValueChange(context,value))" />
					</MudTd>
				</RowTemplate>
				<PagerContent>
					<MudTablePager PageSizeOptions="new []{25, 50, 100, 200}" />
				</PagerContent>
			</MudTable>
		</MudItem>
	</MudGrid>
</MudContainer>

@code {
	private bool _askDeleteConfirmation;
	private bool _showUploadServerDataLoader;
	private bool _showDeleteServerLoader;
	private readonly Dictionary<UserServer, bool> _askKickConfirmations = new ();
	private string _searchPseudo = "";
	private string _searchTag = "";
	private string _searchItem = "";
	private ItemOrTag? _selectedTag;

	protected override void OnInitialized()
	{
		if (ContextService.CurrentUser == null || ContextService.CurrentUserServer == null || !ContextService.CurrentUserServer.IsAdmin)
		{
			Navigation.NavigateTo("/");
		}
	}

	protected override Task OnInitializedAsync()
	{
		ContextService.OnContextChanged += StateHasChanged;

		return Task.CompletedTask;
	}

	public void Dispose()
	{
		ContextService.OnContextChanged -= StateHasChanged;
	}

	private List<ItemOrTag> GetItems()
	{
		return ServerDataService.ItemOrTags.Where(e => !e.IsTag)
			.OrderBy(iot => ContextService.GetTranslation(iot)).ToList();
	}

	private void ToggleTag(ItemOrTag tag)
	{
		_selectedTag = tag == _selectedTag ? null : tag;
	}

	private List<ItemOrTag> GetTags()
	{
		return ServerDataService.ItemOrTags
			.Where(e => e.IsTag)
			.OrderBy(iot => ContextService.GetTranslation(iot))
			.ToList();
	}

	private async Task UploadFiles(IBrowserFile file)
	{
		if (file != null && file.ContentType == "application/json")
		{
			using var stream = file.OpenReadStream(10_000_000);
			using var memoryStream = new MemoryStream();
			await stream.CopyToAsync(memoryStream);

			memoryStream.Position = 0;
			using var reader = new StreamReader(memoryStream);
			string jsonContent = await reader.ReadToEndAsync();

			_showUploadServerDataLoader = true;
			StateHasChanged();
			await ImportDataService.ImportServerData(jsonContent, ContextService.CurrentServer!);
			_showUploadServerDataLoader = false;
			StateHasChanged();

			await ServerDataService.RetrieveServerData(ContextService.CurrentServer);
			await UserServerDataService.RetrieveUserData(ContextService.CurrentUserServer);

			StateHasChanged();

			Snackbar.Clear();
			Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
			Snackbar.Add("Upload Successful", Severity.Success);
		}
	}

	private void ToggleAdmin(UserServer userServer)
	{
		if (userServer == ContextService.CurrentUserServer)
		{
			Snackbar.Add("You can't edit yourself", Severity.Error);
			return;
		}

		userServer.IsAdmin = !userServer.IsAdmin;
		EcoCraftDbContext.SaveChanges();
	}

	private async Task OnMinValueChange(ItemOrTag context, float? minPrice)
	{
		context.MinPrice = minPrice;
		await EcoCraftDbContext.SaveChangesAsync();
	}

	private async Task OnMaxValueChange(ItemOrTag context, float? maxPrice)
	{
		context.MaxPrice = maxPrice;
		await EcoCraftDbContext.SaveChangesAsync();
	}

	private async Task OnClearMinPrices(List<ItemOrTag> itemOrTags)
	{
		bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to clear all min prices ?");
		if (!confirmed) return;

		foreach (var itemOrTag in itemOrTags)
		{
			itemOrTag.MinPrice = null;
		}
		await EcoCraftDbContext.SaveChangesAsync();
	}

	private async Task OnClearMaxPrices(List<ItemOrTag> itemOrTags)
	{
		bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to clear all max prices ?");
		if (!confirmed) return;

		foreach (var itemOrTag in itemOrTags)
		{
			itemOrTag.MaxPrice = null;
		}
		await EcoCraftDbContext.SaveChangesAsync();
	}

	private async Task OnServerNameChanged(UserServer userServer, string newServerName)
	{
		if (newServerName == "") return;
		userServer.Server.Name = newServerName;
		await ServerDbService.UpdateAndSave(userServer.Server);
	}

	private async Task UpdateJoinCode(UserServer userServer)
	{
		userServer.Server.GenerateJoinCode();
		await ServerDbService.UpdateAndSave(userServer.Server);
	}

	private List<UserServer> GetUserServers()
	{
		return ContextService.CurrentServer!.UserServers
			.OrderBy(u => !u.IsAdmin)
			.ThenBy(u => u.Pseudo)
			.ToList();
	}

	private void DeleteServer()
	{
		_askDeleteConfirmation = true;
	}

	private void CancelDeleteServer()
	{
		_askDeleteConfirmation = false;
	}

	private async void ConfirmDeleteServer()
	{
		_askDeleteConfirmation = false;
		_showDeleteServerLoader = true;
		StateHasChanged();
		await ContextService.DeleteCurrentServer();
		_showDeleteServerLoader = false;
		Navigation.NavigateTo("/");
	}

	private void KickUser(UserServer userServer)
	{
		if (!_askKickConfirmations.ContainsKey(userServer))
		{
			_askKickConfirmations.Add(userServer, true);
		}
	}

	private void CancelKick(UserServer userServer)
	{
		if (_askKickConfirmations.ContainsKey(userServer))
		{
			_askKickConfirmations.Remove(userServer);
		}
	}

	private async void ConfirmKick(UserServer userServerToKick)
	{
		if (userServerToKick == ContextService.CurrentUserServer)
		{
			Snackbar.Add("You can't edit yourself", Severity.Error);
			return;
		}

		if (_askKickConfirmations.ContainsKey(userServerToKick))
		{
			_askKickConfirmations.Remove(userServerToKick);
			await ContextService.KickFromServer(userServerToKick);
		}
	}

	private bool FilterPseudo(UserServer userServer)
	{
		if (string.IsNullOrWhiteSpace(_searchPseudo))
			return true;
		if (userServer.Pseudo.Contains(_searchPseudo, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}

	private bool FilterTag(ItemOrTag itemOrTag)
	{
		return FilterItemOrTag(itemOrTag, _searchTag);
	}

	private bool FilterItem(ItemOrTag itemOrTag)
	{
		return FilterItemOrTag(itemOrTag, _searchItem, _selectedTag);
	}

	private bool FilterItemOrTag(ItemOrTag itemOrTag, string search, ItemOrTag? specificTag = null) {
		if (specificTag is not null && !itemOrTag.AssociatedTags.Contains(specificTag))
			return false;
		if (string.IsNullOrWhiteSpace(search))
			return true;
		if (itemOrTag.Name.Contains(search, StringComparison.OrdinalIgnoreCase))
			return true;
		if (ContextService.GetTranslation(itemOrTag).Contains(search, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}
}

