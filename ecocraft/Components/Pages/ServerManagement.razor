@page "/server-management"
@implements IDisposable
@using ecocraft.Models
@using ecocraft.Extensions
@using ecocraft.Services
@using ecocraft.Services.ImportData
@using ecocraft.Services.DbServices
@using ecocraft.Components.Utils
@inject ImportDataService ImportDataService
@inject ContextService ContextService
@inject NavigationManager Navigation
@inject ServerDbService ServerDbService
@inject EcoCraftDbContext EcoCraftDbContext
@inject ServerDataService ServerDataService
@inject UserServerDataService UserServerDataService
@inject LocalizationService LocalizationService
@inject ISnackbar Snackbar
@inject IJSRuntime JsRuntime

<PageTitle>@LocalizationService.GetTranslation("NavMenu.NavAdmin") - Eco Gnome</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
	<MudGrid Style="height: auto">
		<MudItem lg="6" md="12">
			<MudPaper Style="height: 100%">
				<MudPaper Class="pa-2 pl-4 border-5 d-flex align-center"
				          Style="width: 100%; height: 45px; background-color: #303038 !important; border-radius: var(--mud-default-borderradius) 0 0 0; border-bottom: 1px solid var(--mud-palette-table-lines)"
				          Elevation="0">
					<MudText>@LocalizationService.GetTranslation("ServerManagement.ServerSettings.Title")</MudText>
				</MudPaper>
				<MudStack Class="pa-4">
					<MudStack Row>
						<MudTextField Value="ContextService.CurrentServer!.Name"
						              Label="@LocalizationService.GetTranslation("ServerManagement.ServerSettings.ServerName")"
						              Variant="Variant.Outlined"
						              ValueChanged="@((string newServerName) => OnServerNameChanged(ContextService.CurrentUserServer!, newServerName))" />
					</MudStack>
					<MudStack Row>
						<MudTooltip RootClass="flex-1" Text="@LocalizationService.GetTranslation("ServerManagement.JoinCodeTooltip")">
							<MudTextField Readonly
							              Value="@ContextService.CurrentServer!.JoinCode"
							              Label="@LocalizationService.GetTranslation("JoinCode")"
							              Adornment="Adornment.End"
							              AdornmentColor="Color.Default"
							              AdornmentIcon="@Icons.Material.Outlined.ContentCopy"
							              OnAdornmentClick="@(() => CopyToClipboard(ContextService.CurrentServer!.JoinCode))"
							              Variant="Variant.Outlined"/>
						</MudTooltip>
						<MudTooltip RootStyle="display: flex; flex: 0 0 auto; align-items: center" Text="@LocalizationService.GetTranslation("ServerManagement.RefreshJoinCodeTooltip")">
							<MudIconButton Size="Size.Medium" Color="Color.Tertiary" Icon="@Icons.Material.Filled.Refresh" OnClick="@(() => UpdateJoinCode(ContextService.CurrentUserServer!))"/>
						</MudTooltip>
						<MudTooltip RootClass="flex-1" Text="@LocalizationService.GetTranslation("ServerManagement.EcoServerIdTooltip")">
							<MudTextField Value="@ContextService.CurrentServer!.EcoServerId"
							              ReadOnly
							              Label="@LocalizationService.GetTranslation("ServerManagement.EcoServerId")"
							              ShrinkLabel
							              Variant="Variant.Outlined"
							              Adornment="Adornment.End"
							              AdornmentIcon="@Icons.Material.Filled.DeleteForever"
							              OnAdornmentClick="@(() => DissociateServer())"/>
						</MudTooltip>
					</MudStack>
					<MudStack Row Class="flex-no-grow" AlignItems="AlignItems.Start" Spacing="6">
						<MudStack Spacing="0" Style="min-width: 220px">
							@if (!_isLoadingData)
							{
								<MudTable Items="_stats" Dense Hover>
									<HeaderContent>
										<MudTh colspan="2">@LocalizationService.GetTranslation("ServerManagement.ServerSettings.Stats")</MudTh>
									</HeaderContent>
									<RowTemplate>
										<MudTd>@context.Item1</MudTd>
										<MudTd>@context.Item2</MudTd>
									</RowTemplate>
								</MudTable>
							}
							else
							{
								<MudProgressCircular Size="Size.Small" Color="Color.Primary" Indeterminate="true" Class="ml-2"/>
							}
						</MudStack>
						<MudPaper Class="mud-background pa-3">
							<MudStack AlignItems="AlignItems.Center" Style="text-indent: 8px">
								<MudMarkdown Value="@LocalizationService.GetTranslation("ServerManagement.ServerSettings.EcoGnomeModExplanation1")" />
								<MudMarkdown Value="@LocalizationService.GetTranslation("ServerManagement.ServerSettings.EcoGnomeModExplanation2")" />
								<MudStack Row>
									<MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
										<ActivatorContent>
											<MudButton Disabled="_showUploadServerDataLoader"
											           Variant="Variant.Filled"
											           Color="Color.Primary"
											           StartIcon="@Icons.Material.Filled.CloudUpload">
												@LocalizationService.GetTranslation("ServerManagement.ServerSettings.Upload")
												@if (_showUploadServerDataLoader)
												{
													<MudProgressCircular Size="Size.Small" Color="Color.Primary" Indeterminate="true" Class="ml-2"/>
												}
											</MudButton>
										</ActivatorContent>
									</MudFileUpload>

									<div class="py-4 ml-4 mr-2 border-l-1"></div>

									<MudStack>
										@if (!_copyExistingServerClicked)
										{
											<MudButton StartIcon="@Icons.Material.Filled.ImportExport"
											           Variant="Variant.Filled"
											           OnClick="() => _copyExistingServerClicked = true"
											           Color="Color.Tertiary">
												@LocalizationService.GetTranslation("ServerManagement.ServerSettings.CopyExistingServer")
											</MudButton>
										}
										else
										{
											if (!_showCopyExistingServerLoader)
											{
												<MudSelect T="Server"
												           @bind-Value="_copyServer"
												           Class="select-dense copy-server-select"
												           Style="min-width:200px;padding-left:10px"
												           Label="@LocalizationService.GetTranslation("ServerManagement.ServerSettings.ChooseServer")"
												           Dense="false"
												           Underline="false"
												           Variant="Variant.Outlined"
												           AnchorOrigin="Origin.BottomLeft"
												           TransformOrigin="Origin.TopLeft">
													@foreach (var server in ContextService.AvailableServers.Where(r => r != ContextService.CurrentServer))
													{
														<MudSelectItem T="Server" Value="@server">@server.Name</MudSelectItem>
													}
												</MudSelect>
											}

											<MudButton Disabled="@(_showCopyExistingServerLoader || _copyServer is null)"
											           StartIcon="@Icons.Material.Filled.ImportExport"
											           Variant="Variant.Filled"
											           OnClick="() => CopyExistingServer()"
											           Color="Color.Tertiary">
												@LocalizationService.GetTranslation("ServerManagement.ServerSettings.CopyThisServer")

												@if (_showCopyExistingServerLoader)
												{
													<MudProgressCircular Size="Size.Small" Color="Color.Tertiary" Indeterminate="true" Class="ml-2"/>
												}
											</MudButton>
										}
									</MudStack>
								</MudStack>
							</MudStack>
						</MudPaper>
					</MudStack>

					<MudStack Row>
						<MudNumericField T="decimal?" Variant="Variant.Filled" Label="MinCalories" Value="@ContextService.CurrentServer!.MinCalories" ValueChanged="@(v => UpdateMinCalories(v))" />
						<MudNumericField T="decimal?" Variant="Variant.Filled" Label="MaxCalories" Value="@ContextService.CurrentServer!.MaxCalories" ValueChanged="@(v => UpdateMaxCalories(v))" />
						<MudNumericField T="decimal?" Variant="Variant.Filled" Label="MinMargin" Value="@ContextService.CurrentServer!.MinMargin" ValueChanged="@(v => UpdateMinMargin(v))" />
						<MudNumericField T="decimal?" Variant="Variant.Filled" Label="MaxMargin" value="@ContextService.CurrentServer!.MaxMargin" ValueChanged="@(v => UpdateMaxMargin(v))" />
					</MudStack>

					@if (ContextService.CurrentUser!.CanUploadMod || ContextService.CurrentUser.SuperAdmin)
					{
						<MudStack Class="pa-3 mud-background" Spacing="1">
							<MudText>
								<MudIcon Icon="@MDIIcons.Filled.CloudAlert" Color="Color.Warning" Size="Size.Small" Style="position: relative; top:  3px"/>
								@LocalizationService.GetTranslation("ServerManagement.ModUpload.Description")
							</MudText>
							<ModUploader Color="Color.Warning" />
						</MudStack>
					}
					<MudStack Row Justify="Justify.FlexEnd">
						<MudButton HtmlTag="label"
						           Disabled="_showDeleteServerLoader"
						           Variant="Variant.Filled"
						           Color="Color.Error"
						           StartIcon="@Icons.Material.Filled.DeleteForever"
						           OnClick="DeleteServer">
							@LocalizationService.GetTranslation("ServerManagement.ServerSettings.Delete")
							@if (_showDeleteServerLoader)
							{
								<MudProgressCircular Size="Size.Small" Color="Color.Error" Indeterminate="true" Class="ml-2"/>
							}
						</MudButton>
					</MudStack>
				</MudStack>
			</MudPaper>
		</MudItem>
		<MudItem lg="6" md="12">
			<MudTable Items="@GetUserServers()"
			          Filter="new Func<UserServer,bool>(FilterPseudo)"
			          FixedHeader="true"
			          Height="500px"
			          Dense="true">
				<HeaderContent>
					<MudTh>
						<MudStack Row AlignItems="AlignItems.Center">
							<MudText>@LocalizationService.GetTranslation("ServerManagement.Members.Title")</MudText>
							<MudTextField @bind-Value="_searchPseudo"
							              Immediate
							              Placeholder="@LocalizationService.GetTranslation("Search")"
							              Adornment="Adornment.Start"
							              AdornmentIcon="@Icons.Material.Filled.Search"
							              IconSize="Size.Medium"
							              Class="mt-0" />
						</MudStack>
					</MudTh>
					<MudTh></MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTd>
						<MudStack Row AlignItems="AlignItems.Center">
							<MudTooltip Text="@LocalizationService.GetTranslation("ServerManagement.Members.Tooltip.Admin")">
								<MudIcon Class="mt-1" Icon="@Icons.Material.Filled.VerifiedUser" Size="Size.Small" />
							</MudTooltip>
							<MudText Typo="Typo.body2">@context.GetPseudo()</MudText>
						</MudStack>
					</MudTd>
					<MudTd>
						<MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexEnd" Spacing="3">
							@if (context != ContextService.CurrentUserServer)
							{
								<MudButton Variant="Variant.Filled"
								           Color="@(context.IsAdmin ? Color.Warning : Color.Error)"
								           StartIcon="@(context.IsAdmin ? Icons.Material.Filled.KeyboardDoubleArrowDown : Icons.Material.Filled.KeyboardDoubleArrowUp)"
								           OnClick="@(() => ToggleAdmin(context))">
									@(context.IsAdmin ? LocalizationService.GetTranslation("ServerManagement.Members.DemoteAdmin") : LocalizationService.GetTranslation("ServerManagement.Members.PromoteAdmin"))
								</MudButton>
							}

							@if (context != ContextService.CurrentUserServer)
							{
								<MudButton HtmlTag="label"
								           Variant="Variant.Filled"
								           Color="Color.Primary"
								           StartIcon="@Icons.Material.Filled.ExitToApp"
								           OnClick="@(() => KickUser(context))">
									@LocalizationService.GetTranslation("ServerManagement.Members.KickUser")
								</MudButton>
								@if (_askKickConfirmations.ContainsKey(context))
								{
									<br/>
									<MudButton Variant="Variant.Filled"
									           Color="Color.Success"
									           StartIcon="@Icons.Material.Filled.Close"
									           OnClick="@(() => CancelKick(context))" />
									<MudButton Variant="Variant.Filled"
									           Color="Color.Warning"
									           StartIcon="@Icons.Material.Filled.Check"
									           OnClick="@(() => ConfirmKick(context))" />
								}
							}
						</MudStack>
					</MudTd>
				</RowTemplate>
				<PagerContent>
					<MudTablePager PageSizeOptions="new []{10, 25, 50}" />
				</PagerContent>
			</MudTable>
		</MudItem>
		@if (_isLoadingData)
		{
			<MudItem xs="12" Class="px-4 pt-4">
				<MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
					<MudProgressCircular Size="Size.Large" Color="Color.Primary" Indeterminate="true" Class="ml-2"/>
				</MudStack>
			</MudItem>
		}
		else if (ServerDataService.IsDataRetrieved)
		{
			<MudItem lg="4" md="12">
				<MudTable Items="@GetTags()"
				          Filter="new Func<ItemOrTag, bool>(FilterTag)"
				          Virtualize="false"
				          FixedHeader="true"
				          Height="700px"
				          Dense="true"
				          Hover="true">
					<HeaderContent>
						<MudTh>
							<MudStack Row AlignItems="AlignItems.Center">
								<MudText>@LocalizationService.GetTranslation("TagName")</MudText>
								<MudTextField @bind-Value="_searchTag" Immediate Placeholder="@LocalizationService.GetTranslation("Search")" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
							</MudStack>
						</MudTh>
					</HeaderContent>
					<RowTemplate>
						<MudTd>
							<MudStack Row AlignItems="AlignItems.Center" Spacing="2">
								<MudLink OnClick="@(() => ToggleTag(context))">
									<MudText Typo="Typo.body2">
										@LocalizationService.GetTranslation(context) (@context.AssociatedItems.Count)
									</MudText>
								</MudLink>
								@if (_selectedTag == context)
								{
									<MudIconButton Class="pa-0"
									               Color="Color.Primary"
									               Icon="@Icons.Material.Filled.Clear"
									               Size="Size.Small"
									               OnClick="@(() => ToggleTag(context))"/>
								}
							</MudStack>
						</MudTd>
					</RowTemplate>
					<PagerContent>
						<MudTablePager PageSizeOptions="new[] { 25, 50, 100, 200 }"/>
					</PagerContent>
				</MudTable>
			</MudItem>
			<MudItem lg="8" md="12">
				<MudTable Items="@GetItems()" Filter="new Func<ItemOrTag, bool>(FilterItem)" Virtualize="false" FixedHeader="true" Height="700px" Dense="true" Hover="true">
					<HeaderContent>
						<MudTh>
							<MudStack Row AlignItems="AlignItems.Center">
								<MudText>@LocalizationService.GetTranslation("Name")</MudText>
								<MudTextField @bind-Value="_searchItem" Immediate Placeholder="@LocalizationService.GetTranslation("Search")" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
							</MudStack>
						</MudTh>
						<MudTh>
							<MudStack Row>
								<MudText>
									@LocalizationService.GetTranslation("ServerManagement.Items.Min")</MudText>
								<MudTooltip Text="@LocalizationService.GetTranslation("ServerManagement.Items.Min.Tooltip")">
									<MudIconButton Icon="@Icons.Material.Filled.ClearAll"
									               OnClick="@(() => OnClearMinPrices(GetItems()))"
									               Color="Color.Primary"
									               Size="Size.Small"/>
								</MudTooltip>
							</MudStack>
						</MudTh>
						<MudTh>
							<MudStack Row>
								<MudText>
									@LocalizationService.GetTranslation("ServerManagement.Items.Default")</MudText>
								<MudTooltip Text="@LocalizationService.GetTranslation("ServerManagement.Items.Default.Tooltip")">
									<MudIconButton Icon="@Icons.Material.Filled.ClearAll"
									               OnClick="@(() => OnClearDefaultPrices(GetItems()))"
									               Color="Color.Primary"
									               Size="Size.Small"/>
								</MudTooltip>
							</MudStack>
						</MudTh>
						<MudTh>
							<MudStack Row>
								<MudText>@LocalizationService.GetTranslation("ServerManagement.Items.Max")</MudText>
								<MudTooltip Text="@LocalizationService.GetTranslation("ServerManagement.Items.Max.Tooltip")">
									<MudIconButton Icon="@Icons.Material.Filled.ClearAll"
									               OnClick="@(() => OnClearMaxPrices(GetItems()))"
									               Color="Color.Primary"
									               Size="Size.Small"/>
								</MudTooltip>
							</MudStack>
						</MudTh>
					</HeaderContent>
					<RowTemplate>
						<MudTd>
							<MudText Typo="Typo.body2">@LocalizationService.GetTranslation(context)</MudText>
						</MudTd>
						<MudTd>
							<MudNumericField T="decimal?"
							                 Class="rectangle-input"
							                 Disabled="@(context.IsTag)"
							                 HideSpinButtons="@(context.IsTag)"
							                 Value="context.MinPrice"
							                 Format="F2"
							                 Variant="Variant.Outlined"
							                 Converter="@CultureInvariantConverter.DotOrCommaDecimalNull"
							                 ValueChanged="@(value => OnMinValueChange(context, value))"/>
						</MudTd>
						<MudTd>
							<MudNumericField T="decimal?"
							                 Class="rectangle-input"
							                 Disabled="@(context.IsTag)"
							                 HideSpinButtons="@(context.IsTag)"
							                 Value="context.DefaultPrice"
							                 Format="F2"
							                 Variant="Variant.Outlined"
							                 Converter="@CultureInvariantConverter.DotOrCommaDecimalNull"
							                 ValueChanged="@(value => OnDefaultValueChange(context, value))"/>
						</MudTd>
						<MudTd>
							<MudNumericField T="decimal?"
							                 Class="rectangle-input"
							                 Disabled="@(context.IsTag)"
							                 HideSpinButtons="@(context.IsTag)"
							                 Value="context.MaxPrice"
							                 Format="F2"
							                 Variant="Variant.Outlined"
							                 Converter="@CultureInvariantConverter.DotOrCommaDecimalNull"
							                 ValueChanged="@(value => OnMaxValueChange(context, value))"/>
						</MudTd>
					</RowTemplate>
					<PagerContent>
						<MudTablePager PageSizeOptions="new[] { 25, 50, 100, 200 }"/>
					</PagerContent>
				</MudTable>
			</MudItem>
		}
	</MudGrid>
</MudContainer>

@code {
	private bool _askDeleteConfirmation;
	private bool _showUploadServerDataLoader;
	private bool _copyExistingServerClicked;
	private bool _showCopyExistingServerLoader;
	private bool _showDeleteServerLoader;
	private bool _isLoadingData;
	private readonly Dictionary<UserServer, bool> _askKickConfirmations = new ();
	private string _searchPseudo = "";
	private string _searchTag = "";
	private string _searchItem = "";
	private Server? _copyServer;
	private ItemOrTag? _selectedTag;
	private List<(string, decimal)> _stats = [];

	protected override void OnInitialized()
	{
		if (ContextService.CurrentUser == null || ContextService.CurrentUserServer == null || !ContextService.CurrentUserServer.IsAdmin)
		{
			Navigation.NavigateTo("/");
		}

		ContextService.OnContextChanged += OnContextChanged;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await RetrieveData();
		}
	}

	private void OnContextChanged()
	{
		// Make sure you don't have access to this page if you're not admin on this server
		if (ContextService.CurrentUser == null || ContextService.CurrentUserServer == null || !ContextService.CurrentUserServer.IsAdmin)
		{
			Navigation.NavigateTo("/");
			return;
		}
		
		_ = RetrieveData();
	}

	private async Task RetrieveData()
	{
		if (!ServerDataService.IsDataRetrieved)
		{
			_stats.Clear();
			_isLoadingData = true;
			StateHasChanged();

			await ServerDataService.RetrieveServerData(ContextService.CurrentServer!);

			_isLoadingData = false;
		}

		RecalculateStats();

		StateHasChanged();
	}

	public void Dispose()
	{
		ContextService.OnContextChanged -= OnContextChanged;
	}

	private void RecalculateStats()
	{
		_stats.Clear();

		_stats.Add((LocalizationService.GetTranslation("ServerManagement.ServerSettings.Skills"), ServerDataService.Skills.Count(s => s.Profession is not null)));
		_stats.Add((LocalizationService.GetTranslation("ServerManagement.ServerSettings.Talents"), ServerDataService.Skills.SelectMany(s => s.Talents).Count()));
		_stats.Add((LocalizationService.GetTranslation("ServerManagement.ServerSettings.Crafting"), ServerDataService.CraftingTables.Count));
		_stats.Add((LocalizationService.GetTranslation("ServerManagement.ServerSettings.Modules"), ServerDataService.PluginModules.Count));
		_stats.Add((LocalizationService.GetTranslation("ServerManagement.ServerSettings.Recipes"), ServerDataService.Recipes.Count));
		_stats.Add((LocalizationService.GetTranslation("ServerManagement.ServerSettings.Elements"), ServerDataService.Recipes.SelectMany(r => r.Elements).Count()));
		_stats.Add((LocalizationService.GetTranslation("ServerManagement.ServerSettings.Items"), ServerDataService.ItemOrTags.Count(i => !i.IsTag)));
		_stats.Add((LocalizationService.GetTranslation("ServerManagement.ServerSettings.Tags"), ServerDataService.ItemOrTags.Count(i => i.IsTag)));
	}

	private async Task CopyExistingServer()
	{
		if (_copyServer is null) return;

		_showCopyExistingServerLoader = true;

		StateHasChanged();
		await Task.Yield();

		await ImportDataService.CopyServerData(_copyServer!, ContextService.CurrentServer!);
		await ServerDataService.CopyServerContribution(_copyServer!);

		_showCopyExistingServerLoader = false;
		_copyExistingServerClicked = false;

		RecalculateStats();
		StateHasChanged();
	}

	private List<ItemOrTag> GetItems()
	{
		return ServerDataService.ItemOrTags.Where(e => !e.IsTag)
			.OrderBy(iot => LocalizationService.GetTranslation(iot)).ToList();
	}

	private void ToggleTag(ItemOrTag tag)
	{
		_selectedTag = tag == _selectedTag ? null : tag;
	}

	private async Task DissociateServer()
	{
		var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", LocalizationService.GetTranslation("ServerManagement.Confirm.ServerDissociate"));
		if (!confirmed) return;

		ServerDataService.Dissociate(ContextService.CurrentServer!);
		await EcoCraftDbContext.SaveChangesAsync();
		StateHasChanged();
	}

	private List<ItemOrTag> GetTags()
	{
		return ServerDataService.ItemOrTags
			.Where(e => e.IsTag)
			.OrderBy(iot => LocalizationService.GetTranslation(iot))
			.ToList();
	}

	private async Task UploadFiles(IBrowserFile? file)
	{
		if (file is not { ContentType: "application/json" })
		{
			Snackbar.Add($"{LocalizationService.GetTranslation("ServerManagement.Snackbar.UploadNok")}: not a JSON file", Severity.Error);

			return;
		}

		try
		{
			await using var stream = file.OpenReadStream(40_000_000);
			using var memoryStream = new MemoryStream();
			await stream.CopyToAsync(memoryStream);

			memoryStream.Position = 0;
			using var reader = new StreamReader(memoryStream);
			var jsonContent = await reader.ReadToEndAsync();

			_showUploadServerDataLoader = true;
			StateHasChanged();
			var (errorCount, recipeErrorNames) = await ImportDataService.ImportServerData(jsonContent, ContextService.CurrentServer!);

			if (errorCount == 0)
			{
				Snackbar.Add(LocalizationService.GetTranslation("ServerManagement.Snackbar.UploadOk"), Severity.Success);
			}
			else
			{
				Snackbar.Add(
					@<div>
						@LocalizationService.GetTranslation("ServerManagement.Snackbar.UploadPartiallyNok", errorCount.ToString())
						<ul>
							@foreach (var recipeErrorName in recipeErrorNames)
							{
								<li>- @recipeErrorName</li>
							}
						</ul>
						@LocalizationService.GetTranslation("ServerManagement.Snackbar.UploadPartiallyNokEnd")
					</div>,
					Severity.Warning,
					config => { config.RequireInteraction = true; });

			}

			RecalculateStats();
		}
		catch (ImportException ex)
		{
			Console.WriteLine(ex);
			Snackbar.Add(LocalizationService.GetTranslation("ServerManagement.Snackbar.UploadNok") + ": " + ex.Message, Severity.Error);
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
			Snackbar.Add("UNEXPECTED_ERROR: " + ex.Message, Severity.Error);
		}

		await ServerDataService.RetrieveServerData(ContextService.CurrentServer, true);
		await UserServerDataService.RetrieveUserData(null);
		_showUploadServerDataLoader = false;
		StateHasChanged();
	}

	private void ToggleAdmin(UserServer userServer)
	{
		if (userServer == ContextService.CurrentUserServer)
		{
			Snackbar.Add(LocalizationService.GetTranslation("ServerManagement.Snackbar.CantEditYourself"), Severity.Error);
			return;
		}

		userServer.IsAdmin = !userServer.IsAdmin;
		EcoCraftDbContext.SaveChanges();
	}

	private async Task UpdateMinCalories(decimal? v)
	{
		ContextService.CurrentServer!.MinCalories = v;
		await EcoCraftDbContext.SaveChangesAsync();
	}

	private async Task UpdateMaxCalories(decimal? v)
	{
		ContextService.CurrentServer!.MaxCalories = v;
		await EcoCraftDbContext.SaveChangesAsync();
	}

	private async Task UpdateMinMargin(decimal? v)
	{
		ContextService.CurrentServer!.MinMargin = v;
		await EcoCraftDbContext.SaveChangesAsync();

	}

	private async Task UpdateMaxMargin(decimal? v)
	{
		ContextService.CurrentServer!.MaxMargin = v;
		await EcoCraftDbContext.SaveChangesAsync();
	}

	private async Task OnMinValueChange(ItemOrTag context, decimal? minPrice)
	{
		context.MinPrice = minPrice;
		await EcoCraftDbContext.SaveChangesAsync();
	}

	private async Task OnDefaultValueChange(ItemOrTag context, decimal? defaultValue)
	{
		context.DefaultPrice = defaultValue;
		await EcoCraftDbContext.SaveChangesAsync();
	}

	private async Task OnMaxValueChange(ItemOrTag context, decimal? maxPrice)
	{
		context.MaxPrice = maxPrice;
		await EcoCraftDbContext.SaveChangesAsync();
	}

	private async Task OnClearMinPrices(List<ItemOrTag> itemOrTags)
	{
		var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", LocalizationService.GetTranslation("ServerManagement.Confirm.ClearAllMin"));
		if (!confirmed) return;

		foreach (var itemOrTag in itemOrTags)
		{
			itemOrTag.MinPrice = null;
		}
		await EcoCraftDbContext.SaveChangesAsync();
	}

	private async Task OnClearDefaultPrices(List<ItemOrTag> itemOrTags)
	{
		var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", LocalizationService.GetTranslation("ServerManagement.Confirm.ClearAllDefault"));
		if (!confirmed) return;

		foreach (var itemOrTag in itemOrTags)
		{
			itemOrTag.DefaultPrice = null;
		}
		await EcoCraftDbContext.SaveChangesAsync();
	}

	private async Task CopyToClipboard(string text)
	{
		await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
		Snackbar.Add(LocalizationService.GetTranslation("UserConfigurationDialog.SnackbarCopy"), Severity.Info);
	}

	private async Task OnClearMaxPrices(List<ItemOrTag> itemOrTags)
	{
		var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", LocalizationService.GetTranslation("ServerManagement.Confirm.ClearAllMax"));
		if (!confirmed) return;

		foreach (var itemOrTag in itemOrTags)
		{
			itemOrTag.MaxPrice = null;
		}
		await EcoCraftDbContext.SaveChangesAsync();
	}

	private async Task OnServerNameChanged(UserServer userServer, string newServerName)
	{
		if (newServerName == "") return;
		userServer.Server.Name = newServerName;
		await ServerDbService.UpdateAndSave(userServer.Server);
	}

	private async Task UpdateJoinCode(UserServer userServer)
	{
		var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", LocalizationService.GetTranslation("ServerManagement.Confirm.UpdateJoinCode"));
		if (!confirmed) return;

		userServer.Server.GenerateJoinCode();
		await ServerDbService.UpdateAndSave(userServer.Server);
	}

	private List<UserServer> GetUserServers()
	{
		return ContextService.CurrentServer!.UserServers
			.OrderBy(u => !u.IsAdmin)
			.ThenBy(u => u.Pseudo)
			.ToList();
	}

	private async Task DeleteServer()
	{
		var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", LocalizationService.GetTranslation("ServerManagement.Confirm.ServerDeletion"));

		if (confirmed)
		{
			_showDeleteServerLoader = true;
			await InvokeAsync(StateHasChanged);
			await ContextService.DeleteCurrentServer();
			_showDeleteServerLoader = false;
			await InvokeAsync(StateHasChanged);
			Navigation.NavigateTo("/");
		}
	}

	private void KickUser(UserServer userServer)
	{
		_askKickConfirmations.TryAdd(userServer, true);
	}

	private void CancelKick(UserServer userServer)
	{
		if (_askKickConfirmations.ContainsKey(userServer))
		{
			_askKickConfirmations.Remove(userServer);
		}
	}

	private async Task ConfirmKick(UserServer userServerToKick)
	{
		if (userServerToKick == ContextService.CurrentUserServer)
		{
			Snackbar.Add(LocalizationService.GetTranslation("ServerManagement.Snackbar.CantEditYourself"), Severity.Error);

			return;
		}

		if (_askKickConfirmations.ContainsKey(userServerToKick))
		{
			_askKickConfirmations.Remove(userServerToKick);
			await ContextService.KickFromServer(userServerToKick);
		}
	}

	private bool FilterPseudo(UserServer userServer)
	{
		return string.IsNullOrWhiteSpace(_searchPseudo) || userServer.GetPseudo().Contains(_searchPseudo, StringComparison.OrdinalIgnoreCase);
	}

	private bool FilterTag(ItemOrTag itemOrTag)
	{
		return FilterItemOrTag(itemOrTag, _searchTag);
	}

	private bool FilterItem(ItemOrTag itemOrTag)
	{
		return FilterItemOrTag(itemOrTag, _searchItem, _selectedTag);
	}

	private bool FilterItemOrTag(ItemOrTag itemOrTag, string search, ItemOrTag? specificTag = null) {
		if (specificTag is not null && !itemOrTag.AssociatedTags.Contains(specificTag))
			return false;
		if (string.IsNullOrWhiteSpace(search))
			return true;
		if (itemOrTag.Name.Contains(search, StringComparison.OrdinalIgnoreCase))
			return true;
		if (LocalizationService.GetTranslation(itemOrTag).Contains(search, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}
}

