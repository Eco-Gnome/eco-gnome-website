@page "/"
@implements IDisposable
@using ecocraft.Components.Dialog
@using ecocraft.Extensions
@using ecocraft.Models
@using ecocraft.Services
@using ecocraft.Services.DbServices
@inject IDialogService DialogService
@inject ContextService ContextService
@inject ServerDataService ServerDataService
@inject UserServerDataService UserServerDataService
@inject UserPriceDbService UserPriceDbService
@inject PriceCalculatorService PriceCalculatorService
@inject EcoCraftDbContext EcoCraftDbContext
@inject ISnackbar Snackbar

<PageTitle>Price Calculator</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-0">
    <MudGrid Style="height: auto">
        <MudItem md="12" lg="3" Class="pa-2 d-flex flex-column">
            <MudPaper Style="background-color: var(--mud-palette-background)" Elevation="0" Class="flex-grow-1 pa-2">
                <MudAutocomplete T="Skill"
                                 Value="_emptySkill"
                                 Disabled="@(UserServerDataService.GetAvailableSkills().Count == 0)"
                                 SearchFunc="SearchSkills"
                                 ValueChanged="AddUserSkill"
                                 Placeholder="Add skill"
                                 Dense="true"
                                 MaxItems="null"
                                 Variant="Variant.Outlined"
                                 AnchorOrigin="Origin.BottomLeft"
                                 TransformOrigin="Origin.TopLeft">
                    <ItemTemplate>
                        @if (!string.IsNullOrEmpty(context.Profession) && _previousProfession != context.Profession)
                        {
                            <MudText Color="Color.Primary" Typo="Typo.caption">@ContextService.GetTranslation(ServerDataService.Skills.First(s => s.Name == context.Profession))</MudText>
                        }
                        <MudText>@ContextService.GetTranslation(context)</MudText>
                        @{
                            _previousProfession = context.Profession;
                        }
                    </ItemTemplate>
                </MudAutocomplete>

                <MudTable Items="UserServerDataService.UserSkills.Where(us => us.Skill is not null)"
                          Hover="true"
                          Dense="true"
                          Class="mt-4">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Level</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd Class="py-3">
                            <MudText Typo="Typo.body2">@ContextService.GetTranslation(context.Skill)</MudText>
                        </MudTd>
                        <MudTd>
                            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexStart" Spacing="6">
                                <MudNumericField T="int"
                                                 Value="@context.Level"
                                                 Class="square-input flex-no-grow"
                                                 Min="1"
                                                 Max="7"
                                                 Variant="Variant.Outlined"
                                                 Immediate="true"
                                                 ValueChanged="(int newValue) => OnLevelChanged(context, newValue)"/>
                                <MudCheckBox Value="context.HasLavishTalent"
                                             Class="dense-checkbox"
                                             Style="@($"visibility: {(context.Level >= 7 && context.Skill.LavishTalentValue is not null ? "visible" : "hidden")}")"
                                             Label="Lavish talent"
                                             Color="Color.Primary"
                                             ValueChanged="(bool newLavishTalent) => OnLavishTalentChanged(context, newLavishTalent)" />
                            </MudStack>
                        </MudTd>
                        <MudTd Style="text-align: right">
                            <MudIconButton Icon="@Icons.Material.Filled.Clear" aria-label="delete" Size="Size.Small" OnClick="@(() => RemoveUserSkill(context))"></MudIconButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>

                <MudAutocomplete T="CraftingTable"
                                 Value="_emptyCraftingTable"
                                 Disabled="@(UserServerDataService.GetAvailableCraftingTables().Count == 0)"
                                 SearchFunc="SearchCraftingTables"
                                 ValueChanged="AddUserCraftingTable"
                                 Placeholder="Add crafting table"
                                 Dense="true"
                                 Class="mt-4"
                                 MaxItems="null"
                                 Variant="Variant.Outlined"
                                 AnchorOrigin="Origin.BottomLeft"
                                 TransformOrigin="Origin.TopLeft">
                    <ItemTemplate>
                        <MudText>@ContextService.GetTranslation(context)</MudText>
                    </ItemTemplate>
                </MudAutocomplete>

                <MudTable Items="UserServerDataService.UserCraftingTables"
                          FixedHeader="true"
                          Hover="true"
                          Class="mt-4"
                          Dense="true">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Upgrade</MudTh>
                        <MudTh Class="px-1">Cost per min</MudTh>
                        <MudTh Class="px-1"></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd Class="py-3">
                            <MudText Typo="Typo.body2">@ContextService.GetTranslation(context.CraftingTable)</MudText>
                        </MudTd>
                        <MudTd>
                            @if (context.CraftingTable.PluginModules.Count > 0)
                            {
                                <MudSelect T="PluginModule"
                                           Class="select-dense very-dense"
                                           Placeholder="Choose a module"
                                           Value="context.PluginModule"
                                           ValueChanged="@(value => ChangePluginModule(context, value))"
                                           Dense="true"
                                           Typo="Typo.body2"
                                           Variant="Variant.Outlined"
                                           ToStringFunc="@(pm => pm == null ? "No Module" : pm.Name)"
                                           AnchorOrigin="Origin.BottomLeft"
                                           TransformOrigin="Origin.TopLeft">
                                    <MudSelectItem T="PluginModule" Value="@null">No Module</MudSelectItem>
                                    @foreach (var pluginModule in context.CraftingTable.PluginModules.OrderByDescending(pm => pm.Percent))
                                    {
                                        <MudSelectItem T="PluginModule"
                                                       Value="@pluginModule">
                                            <MudText Typo="Typo.body2">
                                                @ContextService.GetTranslation(pluginModule)
                                            </MudText>
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                            }
                        </MudTd>
                        <MudTd Class="px-1">
                            <MudNumericField T="float"
                                             Style="max-width: 85px;"
                                             Class="rectangle-input"
                                             Format="N2"
                                             ValueChanged="@(v => UpdateCraftMinuteFee(context, v))"
                                             Value="@context.CraftMinuteFee"
                                             Variant="Variant.Outlined"/>
                        </MudTd>
                        <MudTd Class="px-1">
                            <MudIconButton Icon="@Icons.Material.Filled.Clear" aria-label="delete" Size="Size.Small" OnClick="@(() => RemoveUserCraftingTable(context))"></MudIconButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>

        <MudItem md="6" lg="4" Class="pa-2 d-flex flex-column">
            <MudPaper Style="background-color: var(--mud-palette-background)" Elevation="0" Class="flex-grow-1 pa-2">
                <MudStack Spacing="0">
                    @if (UserServerDataService.UserSetting is not null)
                    {
                        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                            <MudText>Display non-skilled recipes</MudText>
                            <MudCheckBox T="bool" Value="UserServerDataService.UserSetting.DisplayNonSkilledRecipes" Variant="Variant.Outlined" ValueChanged="OnOptionDisplayChanged"/>
                        </MudStack>
                        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                            <MudText>Only level-accessible recipes</MudText>
                            <MudCheckBox T="bool" Value="UserServerDataService.UserSetting.OnlyLevelAccessibleRecipes" Variant="Variant.Outlined" ValueChanged="OnOptionOnlyLevelChanged"/>
                        </MudStack>
                    }
                    <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                        <MudText>Cost per 1000 calories</MudText>
                        @if (UserServerDataService.UserSetting is not null)
                        {
                            <div>
                                <MudNumericField T="float"
                                                 ValueChanged="UpdateCalorieCost"
                                                 Style="height: 35px; width: 100px"
                                                 Value="UserServerDataService.UserSetting.CalorieCost"
                                                 Variant="Variant.Outlined"/>
                            </div>
                        }
                    </MudStack>

                    @if (UserServerDataService.UserSetting is not null)
                    {
                        <MudTable Items="UserServerDataService.UserMargins"
                                  FixedHeader="true"
                                  Hover="true"
                                  Class="mt-4"
                                  Dense="true">
                            <HeaderContent>
                                <MudTh>
                                    <MudStack Row>
                                        <MudText Typo="Typo.body1">Margin</MudText>
                                        <MudIconButton Size="Size.Small"
                                                       Class="pa-0 pl-2"
                                                       Icon="@(_showMargins ? @Icons.Material.Outlined.Visibility : @Icons.Material.Outlined.VisibilityOff)"
                                                       OnClick="@(() => _showMargins = !_showMargins)"/>
                                    </MudStack>
                                </MudTh>
                                <MudTh></MudTh>
                                <MudTh Style="text-align: right">
                                    @if (!_showMargins)
                                    {
                                        <MudText Typo="Typo.body2">@(UserServerDataService.UserMargins.Count) margins</MudText>
                                    }
                                </MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                @if (_showMargins)
                                {
                                    <MudTd Class="py-1">
                                        <MudTextField Value="context.Name"
                                                      Typo="Typo.body2"
                                                      Style="border-bottom-color: gray"
                                                      ValueChanged="@((string v) => UpdateMarginName(context, v))" />
                                    </MudTd>
                                    <MudTd Class="py-1">
                                        <MudNumericField T="float"
                                                         Class="rectangle-input"
                                                         Style="height: 35px; width: 110px"
                                                         Value="context.Margin"
                                                         Min="0"
                                                         Adornment="Adornment.End"
                                                         AdornmentText="% "
                                                         Converter="@CultureInvariantConverter.DotOrComma"
                                                         ValueChanged="@(v => UpdateMargin(context, v))"
                                                         Variant="Variant.Outlined"/>
                                    </MudTd>
                                    <MudTd Class="py-1" Style="text-align: right;">
                                        <MudTooltip Text="Remove margin">
                                            <MudIconButton Icon="@Icons.Material.Filled.Clear" Size="Size.Small" OnClick="@(() => OnRemoveMargin(context))"/>
                                        </MudTooltip>
                                    </MudTd>
                                }
                            </RowTemplate>
                        </MudTable>
                        @if (_showMargins)
                        {
                            <MudStack Row Class="mt-1" Style="width: 100%" Justify="Justify.Center" AlignItems="AlignItems.Center">
                                <MudButton Class="py-1" StartIcon="@Icons.Material.Filled.Add" OnClick="OnAddMargin">Add margin</MudButton>
                            </MudStack>
                        }
                    }
                </MudStack>

                <MudDivider DividerType="DividerType.FullWidth" Class="my-6"/>

                <MudTable Items="@(PriceCalculatorService.GetCategorizedItemOrTagsForDisplay().ToBuy)"
                          Dense="true"
                          Hover="true">
                    <HeaderContent>
                        <MudTh>
                            Name
                            <MudIconButton Size="Size.Small"
                                           Class="pa-0 pl-2"
                                           Icon="@(_showTagItems ? @Icons.Material.Outlined.Visibility : @Icons.Material.Outlined.VisibilityOff)"
                                           OnClick="@(() => _showTagItems = !_showTagItems)"/>
                        </MudTh>
                        <MudTh>Price</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        @{
                            var userPriceTag = UserServerDataService.UserPrices.First(up => up.ItemOrTag == context);

                            <MudTd Class="@(context.AssociatedItems.Any() && _showTagItems ? "border-0" : "")">
                                <MudText Typo="Typo.body2">
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                        @if (context.IsTag)
                                        {
                                            <MudIcon Icon="@MDIIcons.Outline.Tag" Size="Size.Small" />
                                        }
                                        <MudText Typo="Typo.body2">@ContextService.GetTranslation(context)</MudText>
                                    </MudStack>

                                    @if (!_showTagItems && userPriceTag.PrimaryUserPrice is not null)
                                    {
                                        <MudStack Row AlignItems="AlignItems.Center" Class="pl-8 d-flex" Spacing="1">
                                            <MudIcon Size="Size.Small" Icon="@MDIIcons.Filled.ArrowRightBottom"/>
                                            <MudText Typo="Typo.body2">
                                                @ContextService.GetTranslation(userPriceTag.PrimaryUserPrice.ItemOrTag)
                                            </MudText>
                                        </MudStack>
                                    }
                                </MudText>
                            </MudTd>
                            <MudTd Class="@(context.AssociatedItems.Any() && _showTagItems ? "border-0" : "")" Style="position: relative;">
                                <MudStack Row AlignItems="AlignItems.Center">
                                    <MudNumericField T="float?"
                                                     Class="rectangle-input"
                                                     Disabled="@(context.IsTag)"
                                                     HideSpinButtons="@(context.IsTag)"
                                                     Value="userPriceTag.Price"
                                                     Immediate="true"
                                                     Format="N2"
                                                     Variant="Variant.Outlined"
                                                     Min="context.MinPrice"
                                                     Max="context.MaxPrice"
                                                     ValueChanged="@(value => UpdatePriceCalculation(userPriceTag, value))"/>
                                    @if (context.IsTag && userPriceTag.Price is null)
                                    {
                                        <MudTooltip Text="This value will be the minimum price of it's related items, unless you choose a specific one by clicking a star.">
                                            <MudIcon Style="position: absolute; left: 99px; top: 7px"
                                                     Icon="@MDIIcons.Outline.Information"
                                                     Class="ml-n2"/>
                                        </MudTooltip>
                                    }
                                </MudStack>
                            </MudTd>
                        }
                    </RowTemplate>
                    <ChildRowContent>
                        @if (_showTagItems)
                        {
                            @foreach (var item in context.AssociatedItems)
                            {
                                var userPriceTag = UserServerDataService.UserPrices.First(up => up.ItemOrTag == context);
                                var userPriceItem = UserServerDataService.UserPrices.First(up => up.ItemOrTag == item);

                                <MudTr>
                                    <MudTd Class="@($"pt-0 pb-1 {(context.AssociatedItems.Last() == item ? "" : "border-0")}")">
                                        <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                            <MudIconButton tabindex="-1"
                                                           Icon="@(userPriceTag.PrimaryUserPrice == userPriceItem ? Icons.Material.Filled.Star : Icons.Material.Filled.StarOutline)"
                                                           Size="Size.Small"
                                                           OnClick="@(() => SetPrimaryUserPrice(userPriceTag, userPriceItem))"/>
                                            <MudText Typo="Typo.body2" Class="pt-1">@ContextService.GetTranslation(item)</MudText>
                                        </MudStack>
                                    </MudTd>
                                    <MudTd Class="@($"pt-0 pb-1 {(context.AssociatedItems.Last() == item ? "" : "border-0")}")">
                                        <MudStack Row Style="position: relative;">
                                            <MudNumericField T="float?"
                                                             Class="rectangle-input"
                                                             HideSpinButtons="@(PriceCalculatorService.GetCategorizedItemOrTags().ToSell.Contains(item))"
                                                             Format="N2"
                                                             Disabled="@(PriceCalculatorService.GetCategorizedItemOrTags().ToSell.Contains(item))"
                                                             Value="userPriceItem.Price"
                                                             Immediate="true"
                                                             Min="item.MinPrice"
                                                             Max="item.MaxPrice"
                                                             ValueChanged="@(value => UpdatePriceCalculation(userPriceItem, value))"
                                                             Variant="Variant.Outlined"/>
                                            @if (PriceCalculatorService.GetCategorizedItemOrTags().ToSell.Contains(item))
                                            {
                                                <MudTooltip Text="This value is automatically calculated by the system.">
                                                    <MudIcon Style="position: absolute; top: 1px; left: 78px;"
                                                             Icon="@MDIIcons.Filled.Calculator"></MudIcon>
                                                </MudTooltip>
                                            }
                                        </MudStack>
                                    </MudTd>
                                </MudTr>
                            }
                        }
                    </ChildRowContent>
                </MudTable>
            </MudPaper>
        </MudItem>

        <MudItem md="6" lg="5" Class="pa-2 d-flex flex-column">
            <MudPaper Style="background-color: var(--mud-palette-background)" Elevation="0" Class="flex-grow-1 pa-2">
                <MudAutocomplete T="Recipe"
                                 Value="_emptyRecipe"
                                 Disabled="@(UserServerDataService.GetAvailableRecipes().Count == 0)"
                                 SearchFunc="SearchRecipes"
                                 ValueChanged="AddUserRecipe"
                                 Placeholder="Add recipe"
                                 Dense="true"
                                 MaxItems="null"
                                 Variant="Variant.Outlined"
                                 AnchorOrigin="Origin.BottomLeft"
                                 TransformOrigin="Origin.TopLeft">
                    <ItemTemplate>
                        <MudText>@ContextService.GetTranslation(context)</MudText>
                    </ItemTemplate>
                </MudAutocomplete>

                <MudTable Items="PriceCalculatorService.GetCategorizedItemOrTagsForDisplay().ToSell"
                          Class="mt-4"
                          Dense="true"
                          Hover="true">
                    <HeaderContent>
                        <MudTh>
                            Item Name
                            <MudIconButton Icon="@(_showMultiRecipes ? @Icons.Material.Outlined.Visibility : @Icons.Material.Outlined.VisibilityOff)"
                                           Size="Size.Small"
                                           Class="pa-0 pl-2"
                                           OnClick="@(() => _showMultiRecipes = !_showMultiRecipes)"/>
                        </MudTh>
                        <MudTh>Override price</MudTh>
                        <MudTh>Prices wo/w margin</MudTh>
                        <MudTh Class="px-1">Margin</MudTh>
                        <MudTh Class="px-1"></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        @{
                            var userPrice = UserServerDataService.UserPrices.First(up => up.ItemOrTag == context);
                            var relatedUserElements = UserServerDataService.UserElements
                                .Where(ue => ue.Element.IsProduct()
                                             && ue.Element.ItemOrTag == context
                                             && !ue.IsReintegrated)
                                .ToList();

                            <MudTd Class="@(relatedUserElements.Count > 1 && _showMultiRecipes ? "border-0" : "")">
                                <MudLink Color="Color.Default" Typo="Typo.body2" OnClick="@(() => ShowRecipeDialog(relatedUserElements.First().Element.Recipe))">
                                    @ContextService.GetTranslation(context)
                                </MudLink>
                            </MudTd>
                            <MudTd Class="@(relatedUserElements.Count > 1 && _showMultiRecipes ? "border-0" : "")">
                                <MudSwitch Value=userPrice.OverrideIsBought Color="Color.Primary" ValueChanged="@((bool val) => OnOverridePrice(val, userPrice))"></MudSwitch>
                            </MudTd>
                            
                            <MudTd Class="@(relatedUserElements.Count > 1 && _showMultiRecipes ? "border-0" : "")">
                                <MudStack Row>
                                    <MudNumericField T="float?"
                                                        Class="mt-0"
                                                        Style="height: 26px; width: 75px"
                                                        HideSpinButtons="true"
                                                        Format="N2"
                                                        Disabled="true"
                                                        Value="userPrice.Price"
                                                        Variant="Variant.Outlined" />
                                    <MudNumericField T="float?"
                                                        Class="mt-0"
                                                        Style="height: 26px; width: 75px"
                                                        HideSpinButtons="true"
                                                        Format="N2"
                                                        Disabled="true"
                                                        Value="@(userPrice.Price * (1 + userPrice.UserMargin.Margin / 100))"
                                                        Variant="Variant.Outlined" />
                                </MudStack>
                            </MudTd>
                            <MudTd Class="@(relatedUserElements.Count > 1 && _showMultiRecipes ? "border-0" : "")">
                                <MudSelect
                                    T="UserMargin"
                                    Value="userPrice.UserMargin"
                                    ValueChanged="@(value => ChangeUserPriceMargin(userPrice, value))"
                                    ToStringFunc="@(um => um.Margin + " %")"
                                    Class="select-dense very-dense"
                                    Dense="true"
                                    Variant="Variant.Outlined"
                                    AnchorOrigin="Origin.BottomLeft"
                                    TransformOrigin="Origin.TopLeft">
                                    @foreach (var userMargin in UserServerDataService.UserMargins)
                                    {
                                        <MudSelectItem T="UserMargin"
                                                       Value="userMargin">
                                            @userMargin.Margin %
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                            </MudTd>
                            <MudTd Class="@($"{(relatedUserElements.Count > 1 && _showMultiRecipes ? "border-0" : "")} px-1")">
                                <MudIconButton
                                    Icon="@(relatedUserElements.Count > 1 && _showMultiRecipes ? Icons.Material.Filled.PlaylistRemove : Icons.Material.Filled.Clear)"
                                    Size="Size.Small"
                                    OnClick="@(() => RemoveUserRecipes(UserServerDataService.UserRecipes.Where(ur => relatedUserElements.Select(ue => ue.Element.Recipe).Contains(ur.Recipe)).ToList()))">
                                </MudIconButton>
                            </MudTd>
                        }
                    </RowTemplate>
                    <ChildRowContent>
                        @if (_showMultiRecipes)
                        {
                            var userPrice = UserServerDataService.UserPrices.First(up => up.ItemOrTag == context);
                            var relatedElements = UserServerDataService.UserElements
                                .Where(ue => ue.Element.IsProduct()
                                             && ue.Element.ItemOrTag == context
                                             && !ue.IsReintegrated)
                                .ToList();

                            @if (relatedElements.Count > 1)
                            {
                                @foreach (var userElement in relatedElements)
                                {
                                    <MudTr>
                                        <MudTd Class="@($"{(relatedElements.Last() == userElement ? "" : "border-0")} pt-0 pb-1")"
                                               Style="white-space: nowrap;overflow: hidden; max-width: 280px">
                                            <MudIconButton Icon="@(userPrice.PrimaryUserElement == userElement ? Icons.Material.Filled.Star : Icons.Material.Filled.StarOutline)"
                                                           Size="Size.Small"
                                                           OnClick="@(() => SetPrimaryElement(userPrice, userElement))"/>
                                            <MudLink Color="Color.Default" Typo="Typo.body2" OnClick="@(() => ShowRecipeDialog(userElement.Element.Recipe))">
                                                @ContextService.GetTranslation(userElement.Element.Recipe)
                                            </MudLink>
                                        </MudTd>
                                        <MudTd Class="@($"{(relatedElements.Last() == userElement ? "" : "border-0")} pt-0 pb-1")">
                                            <MudStack Row>
                                                <MudNumericField T="float?" Style="height: 26px; width: 75px" HideSpinButtons="true" Format="N2" Disabled="true" Value="@userElement.Price" Variant="Variant.Outlined"></MudNumericField>
                                                <MudNumericField T="float?" Style="height: 26px; width: 75px" HideSpinButtons="true" Format="N2" Disabled="true" Value="@(userElement.Price * (1 + userPrice.UserMargin.Margin / 100))" Variant="Variant.Outlined"></MudNumericField>
                                            </MudStack>
                                        </MudTd>
                                        <MudTd Class="@($"{(relatedElements.Last() == userElement ? "" : "border-0")} pt-0 pb-1 px-1")"></MudTd>
                                        <MudTd Class="@($"{(relatedElements.Last() == userElement ? "" : "border-0")} pt-0 pb-1 px-1")">
                                            <MudIconButton Icon="@Icons.Material.Filled.Clear" aria-label="delete" Size="Size.Small" OnClick="@(() => RemoveUserRecipe(UserServerDataService.UserRecipes.First(ur => ur.Recipe == userElement.Element.Recipe)))"></MudIconButton>
                                        </MudTd>
                                    </MudTr>
                                }
                            }
                        }
                    </ChildRowContent>
                </MudTable>
            </MudPaper>
        </MudItem>

    </MudGrid>
</MudContainer>

@code {
    private bool _showMultiRecipes = true;
    private bool _showTagItems = true;
    private bool _showMargins = true;

    private Skill? _emptySkill;
    private Recipe? _emptyRecipe;
    private CraftingTable? _emptyCraftingTable;
    private string? _previousProfession;

    protected override Task OnInitializedAsync()
    {
        ContextService.OnContextChanged += StateHasChanged;

        return Task.CompletedTask;
    }

    public void Dispose()
    {
        ContextService.OnContextChanged -= StateHasChanged;
    }

    private Task<IEnumerable<Skill>> SearchSkills(string value, CancellationToken token)
    {
        IEnumerable<Skill> result;

        if (string.IsNullOrEmpty(value))
        {
            result = UserServerDataService.GetAvailableSkills();
        }
        else
        {
            result = UserServerDataService.GetAvailableSkills()
                .Where(s => ContextService.GetTranslation(s).Contains(value, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        result = result.Where(s => s.Profession is not null).OrderBy(s => s.Profession);

        return Task.FromResult(result);
    }

    private Task<IEnumerable<Recipe>> SearchRecipes(string value, CancellationToken token)
    {
        IEnumerable<Recipe> result;

        if (string.IsNullOrEmpty(value))
        {
            result = UserServerDataService.GetAvailableRecipes();
        }
        else
        {
            result = UserServerDataService.GetAvailableRecipes()
                .Where(r => ContextService.GetTranslation(r).Contains(value, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        result = result.OrderBy(r => r.Name);

        return Task.FromResult(result);
    }

    private Task<IEnumerable<CraftingTable>> SearchCraftingTables(string value, CancellationToken token)
    {
        IEnumerable<CraftingTable> result;

        if (string.IsNullOrEmpty(value))
        {
            result = UserServerDataService.GetAvailableCraftingTables();
        }
        else
        {
            result = UserServerDataService.GetAvailableCraftingTables()
                .Where(s => ContextService.GetTranslation(s).Contains(value, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        result = result.OrderBy(c => c.Name);

        return Task.FromResult(result);
    }

    private async Task AddUserSkill(Skill? skill)
    {
        if (skill is null)
        {
            return;
        }

        UserServerDataService.AddUserSkill(skill, ContextService.CurrentUserServer!, UserServerDataService.UserSetting!.OnlyLevelAccessibleRecipes);

        _emptySkill = null;

        await PriceCalculatorService.Calculate();

        StateHasChanged();
    }

    private async Task RemoveUserSkill(UserSkill skill)
    {
        UserServerDataService.RemoveUserSkill(skill);
        await PriceCalculatorService.Calculate();
    }

    private async Task AddUserCraftingTable(CraftingTable? craftingTable)
    {
        if (craftingTable is null)
        {
            return;
        }

        UserServerDataService.AddUserCraftingTable(craftingTable, ContextService.CurrentUserServer!, true);

        _emptyCraftingTable = null;

        await PriceCalculatorService.Calculate();

        StateHasChanged();
    }

    private async Task RemoveUserCraftingTable(UserCraftingTable craftingTable)
    {
        UserServerDataService.RemoveUserCraftingTable(craftingTable);
        await PriceCalculatorService.Calculate();
    }

    private async Task AddUserRecipe(Recipe? recipe)
    {
        if (recipe is null)
        {
            return;
        }

        UserServerDataService.AddUserRecipe(recipe, ContextService.CurrentUserServer!);

        _emptyRecipe = null;

        await PriceCalculatorService.Calculate();

        StateHasChanged();
    }

    private async Task RemoveUserRecipe(UserRecipe recipe)
    {
        UserServerDataService.RemoveUserRecipe(recipe);

        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task SetPrimaryElement(UserPrice userPrice, UserElement userElement)
    {
        userPrice.PrimaryUserElement = userPrice.PrimaryUserElement == userElement ? null : userElement;
        await PriceCalculatorService.Calculate();
    }

    private async Task RemoveUserRecipes(List<UserRecipe> recipes)
    {
        foreach (var recipe in recipes)
        {
            UserServerDataService.RemoveUserRecipe(recipe);
        }

        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task OnLevelChanged(UserSkill userSkill, int newLevel)
    {
        if (userSkill.Level == newLevel) return;

        var isIncrease = newLevel - userSkill.Level > 0;
        userSkill.Level = newLevel;

        if (userSkill.Level < 7)
        {
            userSkill.HasLavishTalent = false;
        }

        if (UserServerDataService.UserSetting!.OnlyLevelAccessibleRecipes)
        {
            UserServerDataService.UserSkillLevelChange(userSkill, ContextService.CurrentUserServer!, isIncrease);
        }

        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task OnLavishTalentChanged(UserSkill userSkill, bool newLavishTalent)
    {
        userSkill.HasLavishTalent = newLavishTalent;

        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task ChangePluginModule(UserCraftingTable userCraftingTable, PluginModule? pluginModule)
    {
        userCraftingTable.PluginModule = pluginModule;
        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task OnOptionDisplayChanged()
    {
        UserServerDataService.UserSetting!.DisplayNonSkilledRecipes = !UserServerDataService.UserSetting.DisplayNonSkilledRecipes;
        UserServerDataService.ToggleEmptyUserSkill(ContextService.CurrentUserServer!, UserServerDataService.UserSetting!.DisplayNonSkilledRecipes);
        await EcoCraftDbContext.SaveChangesAsync();
    }

    private async Task OnOptionOnlyLevelChanged()
    {
        UserServerDataService.UserSetting!.OnlyLevelAccessibleRecipes = !UserServerDataService.UserSetting.OnlyLevelAccessibleRecipes;

        if (UserServerDataService.UserSetting!.OnlyLevelAccessibleRecipes)
        {
            UserServerDataService.RemoveNonAllowedUserRecipes();
        }

        await EcoCraftDbContext.SaveChangesAsync();
    }

    private async Task UpdateCalorieCost(float calorieCost)
    {
        UserServerDataService.UserSetting!.CalorieCost = calorieCost;
        UserServerDataService.UpdateUserSetting(UserServerDataService.UserSetting);
        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task UpdateMargin(UserMargin userMargin, float margin)
    {

        userMargin.Margin = margin;
        //await PriceCalculatorService.Calculate();
        await EcoCraftDbContext.SaveChangesAsync();
        //StateHasChanged();
    }

    private async Task UpdateMarginName(UserMargin userMargin, string name)
    {
        userMargin.Name = name;
        await EcoCraftDbContext.SaveChangesAsync();
        //StateHasChanged();
    }

    private async Task OnAddMargin()
    {
        UserServerDataService.CreateUserMargin(ContextService.CurrentUserServer!);
        await EcoCraftDbContext.SaveChangesAsync();
    }

    private async Task OnRemoveMargin(UserMargin userMargin)
    {
        if(UserServerDataService.UserMargins.Count == 1)
        {
            this.Snackbar.Add("You can't remove your last margin", Severity.Error);
            return;
        }
        UserServerDataService.RemoveUserMargin(userMargin);
        await EcoCraftDbContext.SaveChangesAsync();
        StateHasChanged();
    }

    private async Task ChangeUserPriceMargin(UserPrice userPrice, UserMargin userMargin)
    {
        userPrice.UserMargin = userMargin;
        UserPriceDbService.Update(userPrice);
        await EcoCraftDbContext.SaveChangesAsync();
    }

    private async Task UpdatePriceCalculation(UserPrice userPrice, float? value)
    {
        userPrice.Price = value;
        UserPriceDbService.Update(userPrice);
        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task ShowRecipeDialog(Recipe recipe)
    {
        var parameters = new DialogParameters
        {
            ["Recipe"] = recipe,
        };
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<RecipeDialog>(ContextService.GetTranslation(recipe), parameters, options);

        await dialog.Result;
        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task SetPrimaryUserPrice(UserPrice userPrice, UserPrice target)
    {
        userPrice.PrimaryUserPrice = userPrice.PrimaryUserPrice == target ? null : target;

        await PriceCalculatorService.Calculate();
    }

    private async Task UpdateCraftMinuteFee(UserCraftingTable userCraftingTable, float value)
    {
        userCraftingTable.CraftMinuteFee = value;
        await PriceCalculatorService.Calculate();
    }

    private async Task OnOverridePrice(bool value, UserPrice userPrice)
    {
        userPrice.OverrideIsBought = value;
        UserPriceDbService.Update(userPrice);
        await EcoCraftDbContext.SaveChangesAsync();
    }

}
