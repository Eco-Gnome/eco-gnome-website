@page "/"
@implements IDisposable
@using ecocraft.Components.Dialog
@using ecocraft.Extensions
@using ecocraft.Models
@using ecocraft.Services
@using ecocraft.Services.DbServices
@using System.Globalization;
@using ecocraft.Components.Utils
@inject IDialogService DialogService
@inject ContextService ContextService
@inject LocalStorageService LocalStorageService
@inject ServerDataService ServerDataService
@inject UserServerDataService UserServerDataService
@inject UserPriceDbService UserPriceDbService
@inject PriceCalculatorService PriceCalculatorService
@inject EcoCraftDbContext EcoCraftDbContext
@inject LocalizationService LocalizationService
@inject DataContextDbService DataContextDbService
@inject ISnackbar Snackbar
@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation

<PageTitle>Price Calculator - Eco Gnome</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-0">
    <MudGrid Style="height: auto">
        <MudItem xs="12" Class="px-4 pt-4">
            <MudStack Row Spacing="3">
                @foreach (var dataContext in ContextService.CurrentUserServer!.DataContexts)
                {
                    <MudButton Color="_selectedDataContext == dataContext ? Color.Primary : Color.Default"
                               Variant="Variant.Filled"
                               OnClick="() => SelectDataContext(dataContext)">
                        @dataContext.Name
                        @if (!dataContext.IsDefault)
                        {
                            <MudIconButton Icon="@MDIIcons.Filled.Close"
                                           Size="Size.Medium"
                                           Class="pa-0 ml-2"
                                           OnClick="() => DeleteDataContext(dataContext)"/>
                        }

                    </MudButton>
                }
                <MudButton Color="Color.Tertiary"
                           EndIcon="@MDIIcons.Filled.Plus"
                           Variant="Variant.Outlined"
                           OnClick="() => AddDataContext()">
                    @LocalizationService.GetTranslation("PriceCalculator.AddDataContext")
                </MudButton>
            </MudStack>
        </MudItem>

        @if (_isLoadingData)
        {
            <MudItem xs="12" Class="px-4 pt-4">
                <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                    <MudProgressCircular Size="Size.Large" Color="Color.Primary" Indeterminate="true" Class="ml-2"/>
                </MudStack>
            </MudItem>
        }
        else if (_selectedDataContext is not null && ServerDataService.IsDataRetrieved && UserServerDataService.IsDataRetrieved)
        {
            <ErrorBoundary>
                <ChildContent>
                    <MudItem md="12" lg="3" Class="pa-2 d-flex flex-column">
                        <MudPaper Style="background-color: var(--mud-palette-background)" Elevation="0" Class="flex-grow-1 pa-2">
                            <MudExpansionPanels MultiExpansion="true">
                                <MudExpansionPanel Text="@($"{LocalizationService.GetTranslation("PriceCalculator.Skills")} ({UserServerDataService.UserSkills.Where(us => us.Skill is not null).ToList().Count})")" @bind-Expanded="ExpandedSkills">
                                    <MudAutocomplete T="Skill"
                                                     Value="_emptySkill"
                                                     Disabled="@(UserServerDataService.GetAvailableSkills().Count == 0)"
                                                     SearchFunc="SearchSkills"
                                                     ValueChanged="AddUserSkill"
                                                     Placeholder="@LocalizationService.GetTranslation("PriceCalculator.AddSkill")"
                                                     Dense="true"
                                                     Class="auto-complete-input"
                                                     MaxItems="null"
                                                     Variant="Variant.Outlined"
                                                     AnchorOrigin="Origin.BottomLeft"
                                                     TransformOrigin="Origin.TopLeft">
                                        <ItemTemplate>
                                            <MudStack Class="pl-2" Spacing="0">
                                                @if (!string.IsNullOrEmpty(context.Profession) && _previousProfession != context.Profession)
                                                {
                                                    <MudText Color="Color.Primary" Typo="Typo.caption">@LocalizationService.GetTranslation(ServerDataService.Skills.First(s => s.Name == context.Profession))</MudText>
                                                }
                                                <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                                    <EcoIcon Item="@context" Size="24"/>
                                                    <MudText>@LocalizationService.GetTranslation(context)</MudText>
                                                </MudStack>
                                                @{
                                                    _previousProfession = context.Profession;
                                                }
                                            </MudStack>
                                        </ItemTemplate>
                                    </MudAutocomplete>

                                    <MudTable Items="UserServerDataService.UserSkills.Where(us => us.Skill is not null)"
                                              Hover="true"
                                              Dense="true"
                                              Class="mt-4">
                                        <HeaderContent>
                                            <MudTh Class="pl-2">@LocalizationService.GetTranslation("Name")</MudTh>
                                            <MudTh Class="pl-1">@LocalizationService.GetTranslation("Level")</MudTh>
                                            <MudTh Class="pl-1">@LocalizationService.GetTranslation("Talents")</MudTh>
                                            <MudTh></MudTh>
                                        </HeaderContent>
                                        <RowTemplate>
                                            <MudTd Class="pa-1">
                                                <MudLink Color="Color.Default" OnClick="@(() => ShowSkillDialog(context.Skill))">
                                                    <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexStart">
                                                        <EcoIcon Item="@context.Skill"/>
                                                        <MudText Typo="Typo.body2">@LocalizationService.GetTranslation(context.Skill)</MudText>
                                                    </MudStack>
                                                </MudLink>
                                            </MudTd>
                                            <MudTd Class="px-0">
                                                <MudNumericField T="int"
                                                                 Value="@context.Level"
                                                                 Class="square-input flex-no-grow"
                                                                 Min="1"
                                                                 Max="@context.Skill!.MaxLevel"
                                                                 Variant="Variant.Outlined"
                                                                 Immediate="true"
                                                                 ValueChanged="(int newValue) => OnLevelChanged(context, newValue)"/>
                                            </MudTd>
                                            <MudTd Class="px-0">
                                                <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexStart" Spacing="2">
                                                    @foreach (var talentGroup in context.Skill!.Talents.Where(t => context.Level >= t.Level).OrderBy(t => t.Level).GroupBy(t => t.TalentGroupName))
                                                    {
                                                        var talent = talentGroup.First();

                                                        <MudTooltip Text="@LocalizationService.GetTranslation(talent)" RootClass="d-flex">
                                                            <MudLink OnClick="() => ToggleTalent(talentGroup.ToList())" Class="d-flex" Style="align-items: center">
                                                                <EcoIcon Item="talent" Size="32" Class="@($"{(talent.GetCurrentUserTalent(_selectedDataContext) is null ? "no-talent" : "has-talent")}")"/>
                                                            </MudLink>
                                                        </MudTooltip>
                                                    }
                                                </MudStack>
                                            </MudTd>
                                            <MudTd Class="px-0" Style="text-align: right">
                                                <MudIconButton Icon="@Icons.Material.Filled.Clear"
                                                               aria-label="delete"
                                                               tabindex="-1"
                                                               Size="Size.Small"
                                                               OnClick="@(() => RemoveUserSkill(context))"/>
                                            </MudTd>
                                        </RowTemplate>
                                    </MudTable>
                                </MudExpansionPanel>
                                <MudExpansionPanel Text="@($"{LocalizationService.GetTranslation("PriceCalculator.CraftingTables")} ({UserServerDataService.UserCraftingTables.Count})")" @bind-Expanded="ExpandedCraftingTables">
                                    <MudAutocomplete T="CraftingTable"
                                                     Value="_emptyCraftingTable"
                                                     Disabled="@(UserServerDataService.GetAvailableCraftingTables().Count == 0)"
                                                     SearchFunc="SearchCraftingTables"
                                                     ValueChanged="AddUserCraftingTable"
                                                     Placeholder="@LocalizationService.GetTranslation("PriceCalculator.AddCraftingTable")"
                                                     Dense="true"
                                                     Class="mt-4 auto-complete-input"
                                                     MaxItems="null"
                                                     Variant="Variant.Outlined"
                                                     AnchorOrigin="Origin.BottomLeft"
                                                     TransformOrigin="Origin.TopLeft">
                                        <ItemTemplate>
                                            <MudStack Row Spacing="2" Class="pl-2">
                                                <EcoIcon Item="context" Size="24"></EcoIcon>
                                                <MudText>@LocalizationService.GetTranslation(context)</MudText>
                                            </MudStack>
                                        </ItemTemplate>
                                    </MudAutocomplete>

                                    <MudTable Items="@UserServerDataService.UserCraftingTables.OrderBy(c => LocalizationService.GetTranslation(c.CraftingTable))"
                                              FixedHeader="true"
                                              Hover="true"
                                              Class="mt-4"
                                              Dense="true">
                                        <HeaderContent>
                                            <MudTh>@LocalizationService.GetTranslation("Name")</MudTh>
                                            <MudTh Class="pl-1">@LocalizationService.GetTranslation("Upgrade")</MudTh>
                                            <MudTh Class="p-0 pl-1">
                                                <MudTooltip Text="@LocalizationService.GetTranslation("PriceCalculator.CostMin.Tooltip")">
                                                    <MudText Class="tooltip-text">@LocalizationService.GetTranslation("PriceCalculator.CostMin.CostMin")</MudText>
                                                </MudTooltip>
                                            </MudTh>
                                            <MudTh Class="px-1"></MudTh>
                                        </HeaderContent>
                                        <RowTemplate>
                                            <MudTd Class="pa-1">
                                                <MudLink Color="Color.Default" OnClick="@(() => ShowCraftingTableDialog(context.CraftingTable))">
                                                    <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexStart">
                                                        <EcoIcon Item="@context.CraftingTable"/>
                                                        <MudText Typo="Typo.body2">@LocalizationService.GetTranslation(context.CraftingTable)</MudText>
                                                    </MudStack>
                                                </MudLink>
                                            </MudTd>
                                            <MudTd Class="pa-1">
                                                @if (context.CraftingTable.PluginModules.Count > 0)
                                                {
                                                    var genericPluginModules = context.CraftingTable.PluginModules
                                                        .Where(p => p.Skill is null)
                                                        .OrderByDescending(pm => pm.Percent)
                                                        .ThenBy(pm => LocalizationService.GetTranslation(pm))
                                                        .ToList();

                                                    var skilledPluginModules = context.CraftingTable.PluginModules
                                                        .Where(p => p.Skill is not null)
                                                        .OrderByDescending(pm => pm.SkillPercent)
                                                        .ThenBy(pm => LocalizationService.GetTranslation(pm))
                                                        .ToList();

                                                    var shouldDisableIncrease = genericPluginModules.FindIndex(pm => pm == context.PluginModule) == genericPluginModules.Count - 1;

                                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                                        <MudIconButton Icon="@MDIIcons.Filled.Minus"
                                                                       Size="Size.Small"
                                                                       Disabled="@(genericPluginModules.FindIndex(pm => pm == context.PluginModule) <= -1)"
                                                                       OnClick="@(() => DecreasePluginModule(context, genericPluginModules))"/>
                                                        <MudTooltip Text="@(context.PluginModule?.GetTooltip(LocalizationService) ?? LocalizationService.GetTranslation("PriceCalculator.NoModule"))">
                                                            <EcoIcon Item="@context.PluginModule" FallbackIcon="@MDIIcons.Filled.Cancel" Class="mt-1"/>
                                                        </MudTooltip>
                                                        @if (!shouldDisableIncrease)
                                                        {
                                                            <MudIconButton Icon="@MDIIcons.Filled.Plus"
                                                                           Size="Size.Small"
                                                                           Disabled="shouldDisableIncrease"
                                                                           OnClick="@(() => IncreasePluginModule(context, genericPluginModules))"/>
                                                        }

                                                        @if (genericPluginModules.LastOrDefault() == context.PluginModule)
                                                        {
                                                            @foreach (var skilledPluginModule in skilledPluginModules)
                                                            {
                                                                <MudLink OnClick="() => ToggleSkilledPluginModule(context, skilledPluginModule)">
                                                                    <MudTooltip Text="@skilledPluginModule.GetTooltip(LocalizationService)">
                                                                        <EcoIcon Item="@skilledPluginModule" Size="24" Class="@($"{(context.SkilledPluginModules.Contains(skilledPluginModule) ? "has-pluginmodule" : "no-pluginmodule")} mt-1")"/>
                                                                    </MudTooltip>
                                                                </MudLink>
                                                            }
                                                        }
                                                    </MudStack>
                                                }
                                            </MudTd>
                                            <MudTd Class="px-1">
                                                <MudNumericField T="decimal"
                                                                 Style="max-width: 75px;"
                                                                 Class="rectangle-input"
                                                                 Format="0.##"
                                                                 ValueChanged="@(v => UpdateCraftMinuteFee(context, v))"
                                                                 Converter="@CultureInvariantConverter.DotOrCommaDecimal"
                                                                 Value="@context.CraftMinuteFee"
                                                                 Variant="Variant.Outlined"/>
                                            </MudTd>
                                            <MudTd Class="px-1">
                                                <MudIconButton Icon="@Icons.Material.Filled.Clear"
                                                               aria-label="delete"
                                                               tabindex="-1"
                                                               Size="Size.Small"
                                                               OnClick="@(() => RemoveUserCraftingTable(context))"/>
                                            </MudTd>
                                        </RowTemplate>
                                    </MudTable>
                                </MudExpansionPanel>
                                <MudExpansionPanel Text="@($"{LocalizationService.GetTranslation("Margins")} ({UserServerDataService.UserMargins.Count})")" @bind-Expanded="ExpandedMargins">
                                    @if (UserServerDataService.UserSetting is not null)
                                    {
                                        <MudTable Items="UserServerDataService.UserMargins"
                                                  FixedHeader="true"
                                                  Hover="true"
                                                  Class="mt-4"
                                                  Dense="true">
                                            <HeaderContent>
                                                <MudTh>
                                                    <MudText>@LocalizationService.GetTranslation("Name")</MudText>
                                                </MudTh>
                                                <MudTh>
                                                    <MudTooltip Text="@LocalizationService.GetTranslation("PriceCalculator.MarginPercent.Tooltip")">
                                                        <MudText Class="tooltip-text">@LocalizationService.GetTranslation("PriceCalculator.MarginPercent.MarginPercent")</MudText>
                                                    </MudTooltip>
                                                </MudTh>
                                                <MudTh></MudTh>
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd Class="py-1">
                                                    <MudTextField Value="context.Name"
                                                                  Typo="Typo.body2"
                                                                  Style="border-bottom-color: gray"
                                                                  ValueChanged="@((string v) => UpdateMarginName(context, v))"/>
                                                </MudTd>
                                                <MudTd Class="py-1">
                                                    <MudNumericField T="decimal"
                                                                     Immediate
                                                                     Class="rectangle-input"
                                                                     Style="width: 93px"
                                                                     Value="context.Margin"
                                                                     Adornment="Adornment.End"
                                                                     AdornmentText="% "
                                                                     Converter="@CultureInvariantConverter.DotOrCommaDecimal"
                                                                     ValueChanged="@(v => UpdateMargin(context, v))"
                                                                     Variant="Variant.Outlined"/>
                                                </MudTd>
                                                <MudTd Class="py-1" Style="text-align: right;">
                                                    <MudTooltip Text="@LocalizationService.GetTranslation("PriceCalculator.RemoveMargin")" Class="flex">
                                                        <MudIconButton Icon="@Icons.Material.Filled.Clear"
                                                                       tabindex="-1"
                                                                       Size="Size.Small"
                                                                       OnClick="@(() => OnRemoveMargin(context))"/>
                                                    </MudTooltip>
                                                </MudTd>
                                            </RowTemplate>
                                        </MudTable>
                                        <MudStack Row Class="mt-1" Style="width: 100%" Justify="Justify.Center" AlignItems="AlignItems.Center">
                                            <MudButton Class="py-1"
                                                       StartIcon="@Icons.Material.Filled.Add"
                                                       tabindex="-1"
                                                       OnClick="OnAddMargin">@LocalizationService.GetTranslation("PriceCalculator.AddMargin")</MudButton>
                                        </MudStack>
                                    }
                                </MudExpansionPanel>

                                <MudExpansionPanel Text="@LocalizationService.GetTranslation("Options")" @bind-Expanded="ExpandedOptions">
                                    <MudStack Spacing="1" Class="pa-2">
                                        <MudTextField T="string"
                                                      Label="@LocalizationService.GetTranslation("PriceCalculator.ContextName")"
                                                      Variant="Variant.Filled"
                                                      Immediate
                                                      Value="@_selectedDataContext!.Name"
                                                      ValueChanged="@(v => UpdateDataContextValues(v))"/>
                                        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                            <MudTooltip Text="@LocalizationService.GetTranslation("PriceCalculator.NonSkilled.Tooltip")">
                                                <MudText Class="tooltip-text">@LocalizationService.GetTranslation("PriceCalculator.NonSkilled.NonSkilled")</MudText>
                                            </MudTooltip>
                                            <MudCheckBox T="bool" Value="UserServerDataService.UserSetting!.DisplayNonSkilledRecipes" Variant="Variant.Outlined" ValueChanged="OnOptionDisplayChanged"/>
                                        </MudStack>
                                        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                            <MudTooltip Text="@LocalizationService.GetTranslation("PriceCalculator.LevelAccessible.Tooltip")">
                                                <MudText Class="tooltip-text">@LocalizationService.GetTranslation("PriceCalculator.LevelAccessible.LevelAccessible")</MudText>
                                            </MudTooltip>
                                            <MudCheckBox T="bool" Value="UserServerDataService.UserSetting!.OnlyLevelAccessibleRecipes" Variant="Variant.Outlined" ValueChanged="OnOptionOnlyLevelChanged"/>
                                        </MudStack>
                                        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                            <MudTooltip Text="@LocalizationService.GetTranslation("PriceCalculator.ApplyMarginBetweenSkills.Tooltip")">
                                                <MudText Class="tooltip-text">@LocalizationService.GetTranslation("PriceCalculator.ApplyMarginBetweenSkills.ApplyMarginBetweenSkills")</MudText>
                                            </MudTooltip>
                                            <MudCheckBox T="bool" Value="UserServerDataService.UserSetting!.ApplyMarginBetweenSkills" Variant="Variant.Outlined" ValueChanged="OnOptionApplyMarginBetweenSkillsChanged"/>
                                        </MudStack>
                                        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                            <MudTooltip>
                                                <TooltipContent>
                                                    <MudStack Spacing="0">
                                                        <MudText>@LocalizationService.GetTranslation("PriceCalculator.MarginType.Tooltip.1")</MudText>
                                                        <MudText Typo="Typo.body2">@LocalizationService.GetTranslation("PriceCalculator.MarginType.Tooltip.2")</MudText>
                                                        <MudText Typo="Typo.body2">@LocalizationService.GetTranslation("PriceCalculator.MarginType.Tooltip.3")</MudText>
                                                    </MudStack>
                                                </TooltipContent>
                                                <ChildContent>
                                                    <MudText Class="tooltip-text">@LocalizationService.GetTranslation("PriceCalculator.MarginType.MarginType")</MudText>
                                                </ChildContent>
                                            </MudTooltip>
                                            <div class="flex-no-grow">
                                                <MudSelect T="MarginType"
                                                           Class="select-dense very-dense"
                                                           Value="UserServerDataService.UserSetting!.MarginType"
                                                           Variant="Variant.Outlined"
                                                           ValueChanged="OnOptionMarginTypeChanged">
                                                    <MudSelectItem Value="@MarginType.MarkUp">@LocalizationService.GetTranslation("PriceCalculator.MarginType.MarkUp")</MudSelectItem>
                                                    <MudSelectItem Value="@MarginType.GrossMargin">@LocalizationService.GetTranslation("PriceCalculator.MarginType.GrossMargin")</MudSelectItem>
                                                </MudSelect>
                                            </div>
                                        </MudStack>
                                        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                            <MudTooltip Text="@LocalizationService.GetTranslation("PriceCalculator.CalorieCost.Tooltip")">
                                                <MudText Class="tooltip-text">@LocalizationService.GetTranslation("PriceCalculator.CalorieCost.CalorieCost")</MudText>
                                            </MudTooltip>
                                            <div>
                                                <MudNumericField T="decimal"
                                                                 ValueChanged="UpdateCalorieCost"
                                                                 Style="height: 35px; width: 100px"
                                                                 Value="UserServerDataService.UserSetting!.CalorieCost"
                                                                 Converter="@CultureInvariantConverter.DotOrCommaDecimal"
                                                                 Variant="Variant.Outlined"/>
                                            </div>
                                        </MudStack>
                                    </MudStack>
                                </MudExpansionPanel>
                            </MudExpansionPanels>
                       </MudPaper>
                   </MudItem>

                    <MudItem md="6" lg="4" Class="pa-2 d-flex flex-column">
                        <MudPaper Style="background-color: var(--mud-palette-background)" Elevation="0" Class="flex-grow-1 pa-2">
                            <MudTable Items="@(PriceCalculatorService.GetCategorizedItemOrTagsForDisplay(_selectedDataContext).ToBuy)"
                                      Filter="new Func<ItemOrTag, bool>(FilterTagToBuy)"
                                      Dense="true"
                                      Hover="true"
                                      Virtualize="false">
                                <ToolBarContent>
                                    <MudStack Row>
                                        <MudText Typo="Typo.h6">@LocalizationService.GetTranslation("PriceCalculator.ItemsToBuy")</MudText>
                                        <MudTooltip RootClass="pt-1" Text="@LocalizationService.GetTranslation("ServerPricesDialog.OpenTooltip")">
                                            <MudIconButton Size="Size.Small" Color="Color.Primary" Icon="@MDIIcons.Filled.CurrencyUsd" OnClick="() => OpenServerPricesDialog()"/>
                                        </MudTooltip>
                                    </MudStack>
                                </ToolBarContent>
                                <HeaderContent>
                                    <MudTh Class="pl-1">
                                        <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                            <MudIconButton Size="Size.Small"
                                                           tabindex="-1"
                                                           Color="Color.Primary"
                                                           Icon="@(_showDetailedTags ? MDIIcons.Outline.FolderOpen : MDIIcons.Outline.Folder)"
                                                           OnClick="@(() => ShowDetailedTags = !_showDetailedTags)"/>
                                            <MudTextField @bind-Value="_searchTagToBuy"
                                                          Clearable
                                                          Immediate
                                                          Placeholder="@LocalizationService.GetTranslation("PriceCalculator.IngredientSearch")"
                                                          Adornment="Adornment.Start"
                                                          AdornmentIcon="@Icons.Material.Filled.Search"
                                                          IconSize="Size.Small"
                                                          Class="mt-0 small-text-field"/>
                                        </MudStack>
                                    </MudTh>
                                    <MudTh>@LocalizationService.GetTranslation("PriceCalculator.BuyPrice")</MudTh>
                                    <MudTh Style="width: 0; padding: 0"></MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd Class="@(context.AssociatedItems.Any() && _showDetailedTags ? "border-b-0" : "")">
                                        <MudLink Color="Color.Default" OnClick="@(() => ShowItemOrTagDialog(context))">
                                            <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                                <EcoIcon Item="@context"/>
                                                <MudText Typo="Typo.body2">@LocalizationService.GetTranslation(context)</MudText>

                                                @if (!_showDetailedTags && context.AssociatedItems.Count > 0)
                                                {
                                                    <MudText Typo="Typo.body2">[@(context.AssociatedItems.Count)]</MudText>
                                                }

                                                @if (context.IsTag)
                                                {
                                                    <MudIcon Icon="@MDIIcons.Outline.Tag" Size="Size.Small"/>
                                                }
                                            </MudStack>
                                        </MudLink>
                                        @if (!_showDetailedTags && context.GetCurrentUserPrice(_selectedDataContext)!.PrimaryUserPrice is not null)
                                        {
                                            <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Class="pl-6">
                                                <MudIcon Size="Size.Small" Icon="@MDIIcons.Filled.ArrowUpLeft"/>
                                                <MudText Typo="Typo.body2" Style="position: relative; top: 4px">
                                                    @LocalizationService.GetTranslation(context.GetCurrentUserPrice(_selectedDataContext).PrimaryUserPrice.ItemOrTag)
                                                </MudText>
                                            </MudStack>
                                        }
                                    </MudTd>
                                    <MudTd Class="@(context.AssociatedItems.Any() && _showDetailedTags ? "border-b-0" : "")" Style="position: relative;">
                                        <MudStack Row AlignItems="AlignItems.Center" Spacing="0">
                                            @{
                                                var isTagEmptyPrice = context.IsTag && context.GetCurrentUserPrice(_selectedDataContext)!.Price is null;
                                                var isItemEmptyPrice = !context.IsTag && context.GetCurrentUserPrice(_selectedDataContext)!.Price is null;
                                                var isMinPrice = context.GetCurrentUserPrice(_selectedDataContext)!.Price == context.MinPrice && context.GetCurrentUserPrice(_selectedDataContext)!.Price is not null;
                                                var isMaxPrice = context.GetCurrentUserPrice(_selectedDataContext).Price == context.MaxPrice && !context.IsTag && context.GetCurrentUserPrice(_selectedDataContext)!.Price is not null;

                                                <MudTooltip Disabled="@(!(isTagEmptyPrice || isItemEmptyPrice || isMinPrice || isMaxPrice))"
                                                            Text="@(isTagEmptyPrice
                                                                      ? LocalizationService.GetTranslation("PriceCalculator.PriceTooltip.isTagEmptyPrice")
                                                                      : isItemEmptyPrice
                                                                          ? LocalizationService.GetTranslation("PriceCalculator.PriceTooltip.isItemEmptyPrice")
                                                                          : isMinPrice
                                                                              ? LocalizationService.GetTranslation("PriceCalculator.PriceTooltip.isMinPrice")
                                                                              : LocalizationService.GetTranslation("PriceCalculator.PriceTooltip.isMaxPrice"))">

                                                    <MudNumericField T="decimal?"
                                                                     Class="@($"rectangle-input small-adornment {(context.IsTag ? "" : "small-adornment-with-spin")} {(isMinPrice ? "min-price" : isMaxPrice ? "max-price" : "")}")"
                                                                     Style="width: 111px;"
                                                                     Disabled="@(context.IsTag)"
                                                                     HideSpinButtons="@(context.IsTag)"
                                                                     Value="context.GetCurrentUserPrice(_selectedDataContext).Price"
                                                                     Immediate="true"
                                                                     Format="0.##"
                                                                     Variant="Variant.Outlined"
                                                                     Converter="@CultureInvariantConverter.DotOrCommaDecimalNull"
                                                                     Min="context.MinPrice"
                                                                     Max="context.MaxPrice"
                                                                     Adornment="@(context.GetCurrentUserPrice(_selectedDataContext).Price is null ? Adornment.End : Adornment.None)"
                                                                     AdornmentIcon="@(context.IsTag ? MDIIcons.Filled.Calculator : MDIIcons.Outline.Information)"
                                                                     AdornmentColor="@(context.IsTag ? Color.Default : Color.Warning)"
                                                                     ValueChanged="@(value => UpdatePriceCalculation(context.GetCurrentUserPrice(_selectedDataContext), value))"/>
                                                </MudTooltip>
                                                @if (!context.IsTag && context.GetCurrentUserPrice(_selectedDataContext)!.Price is not null)
                                                {
                                                    <MudIconButton Icon="@Icons.Material.Outlined.ContentCopy"
                                                                   tabindex="-1"
                                                                   OnClick="() => CopyToClipboard(context.GetCurrentUserPrice(_selectedDataContext)!.Price)"
                                                                   Size="Size.Small"/>
                                                }
                                            }
                                        </MudStack>
                                    </MudTd>

                                    <MudTd Style="width: 0; padding: 0;"
                                           Class="@($"{(context.AssociatedItems.Any() && _showDetailedTags ? "border-b-0" : "")} {(context.GetCurrentUserPrice(_selectedDataContext)!.OverrideIsBought ? "border-l-1" : "")}")">
                                        @if (context.GetCurrentUserPrice(_selectedDataContext).OverrideIsBought)
                                        {
                                            <MudTooltip Text="@LocalizationService.GetTranslation("PriceCalculator.CancelOverride")">
                                                <MudIconButton Icon="@MDIIcons.Filled.ChevronDoubleRight"
                                                               tabindex="-1"
                                                               OnClick="() => OverridePrice(false, context.GetCurrentUserPrice(_selectedDataContext))"
                                                               Size="Size.Small"/>
                                            </MudTooltip>
                                        }
                                    </MudTd>
                                </RowTemplate>
                                <ChildRowContent>
                                    @if (_showDetailedTags)
                                    {
                                        @foreach (var item in context.AssociatedItems)
                                        {
                                            <MudTr>
                                                <MudTd Class="@($"pt-0 pb-1 {(context.AssociatedItems.Last() == item ? "" : "border-b-0")}")">
                                                    <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                                        <MudIcon Icon="@MDIIcons.Filled.ArrowRightBottom"
                                                                 Size="Size.Small"/>
                                                        <EcoIcon Item="item" Size="24"/>
                                                        <MudLink Color="Color.Default" OnClick="@(() => ShowItemOrTagDialog(item))">
                                                            <MudText Typo="Typo.body2" Class="pt-1 ">@LocalizationService.GetTranslation(item)</MudText>
                                                        </MudLink>
                                                    </MudStack>
                                                </MudTd>

                                                <MudTd Class="@($"pt-0 pb-1 {(context.AssociatedItems.Last() == item ? "" : "border-b-0")}")">
                                                    <MudStack Row Style="position: relative;" Spacing="0">
                                                        @{
                                                            var isAutoCalculatedPrice = PriceCalculatorService.GetCategorizedItemOrTags(_selectedDataContext).ToSell.Contains(item) && !item.GetCurrentUserPrice(_selectedDataContext)!.OverrideIsBought;
                                                            var isEmptyPrice = !isAutoCalculatedPrice && item.GetCurrentUserPrice(_selectedDataContext)!.Price is null;
                                                            var isMinPrice = item.GetCurrentUserPrice(_selectedDataContext)!.Price == item.MinPrice && item.GetCurrentUserPrice(_selectedDataContext)!.Price is not null;
                                                            var isMaxPrice = item.GetCurrentUserPrice(_selectedDataContext)!.Price == item.MaxPrice && item.GetCurrentUserPrice(_selectedDataContext)!.Price is not null;

                                                            <MudTooltip Text="@(context.GetCurrentUserPrice(_selectedDataContext)!.PrimaryUserPrice == item.GetCurrentUserPrice(_selectedDataContext) ? LocalizationService.GetTranslation("PriceCalculator.CancelFavoriteItem") : LocalizationService.GetTranslation("PriceCalculator.AddFavoriteItem"))">
                                                                <MudIconButton tabindex="-1"
                                                                               Color="Color.Primary"
                                                                               Icon="@(context.GetCurrentUserPrice(_selectedDataContext)!.PrimaryUserPrice == item.GetCurrentUserPrice(_selectedDataContext) ? Icons.Material.Filled.Star : Icons.Material.Filled.StarOutline)"
                                                                               Size="Size.Small"
                                                                               OnClick="@(() => SetPrimaryUserPrice(context.GetCurrentUserPrice(_selectedDataContext), item.GetCurrentUserPrice(_selectedDataContext)!))"/>
                                                            </MudTooltip>
                                                            <MudTooltip Disabled="@(!(isAutoCalculatedPrice || isEmptyPrice || isMinPrice || isMaxPrice))"
                                                                        Text="@(isAutoCalculatedPrice
                                                                                  ? LocalizationService.GetTranslation("PriceCalculator.PriceTooltip.isAutoCalculatedPrice")
                                                                                  : isEmptyPrice
                                                                                      ? LocalizationService.GetTranslation("PriceCalculator.PriceTooltip.isItemEmptyPrice")
                                                                                      : isMinPrice
                                                                                          ? LocalizationService.GetTranslation("PriceCalculator.PriceTooltip.isMinPrice")
                                                                                          : LocalizationService.GetTranslation("PriceCalculator.PriceTooltip.isMaxPrice"))">
                                                                <MudNumericField T="decimal?"
                                                                                 Class="@($"rectangle-input small-adornment {(isAutoCalculatedPrice ? "" : "small-adornment-with-spin")} {(isMinPrice ? "min-price" : isMaxPrice ? "max-price" : "")}")"
                                                                                 Style="width: 85px;"
                                                                                 HideSpinButtons="@isAutoCalculatedPrice"
                                                                                 Format="0.##"
                                                                                 Disabled="@isAutoCalculatedPrice"
                                                                                 Value="item.GetCurrentUserPrice(_selectedDataContext).Price"
                                                                                 Immediate="true"
                                                                                 Min="item.MinPrice"
                                                                                 Max="item.MaxPrice"
                                                                                 Converter="@CultureInvariantConverter.DotOrCommaDecimalNull"
                                                                                 ValueChanged="@(value => UpdatePriceCalculation(item.GetCurrentUserPrice(_selectedDataContext), value))"
                                                                                 Adornment="@(isAutoCalculatedPrice || item.GetCurrentUserPrice(_selectedDataContext)!.Price is null ? Adornment.End : Adornment.None)"
                                                                                 AdornmentIcon="@(isAutoCalculatedPrice ? MDIIcons.Filled.Calculator : MDIIcons.Outline.Information)"
                                                                                 AdornmentColor="@(isAutoCalculatedPrice ? Color.Default : Color.Warning)"
                                                                                 Variant="Variant.Outlined"/>
                                                            </MudTooltip>
                                                            @if (!isAutoCalculatedPrice && item.GetCurrentUserPrice(_selectedDataContext).Price is not null)
                                                            {
                                                                <MudIconButton Icon="@Icons.Material.Outlined.ContentCopy"
                                                                               tabindex="-1"
                                                                               OnClick="() => CopyToClipboard(item.GetCurrentUserPrice(_selectedDataContext)!.Price)"
                                                                               Size="Size.Small"/>
                                                            }
                                                        }
                                                    </MudStack>
                                                </MudTd>

                                                <MudTd Class="@($"pa-0 {(item.GetCurrentUserPrice(_selectedDataContext)!.OverrideIsBought ? "border-l-1" : "")} {(context.AssociatedItems.Last() == item ? "" : "border-b-0")}")">
                                                    @if (item.GetCurrentUserPrice(_selectedDataContext).OverrideIsBought)
                                                    {
                                                        <MudTooltip Text="@LocalizationService.GetTranslation("PriceCalculator.CancelOverride")">
                                                            <MudIconButton Icon="@MDIIcons.Filled.ChevronDoubleRight"
                                                                           tabindex="-1"
                                                                           OnClick="() => OverridePrice(false, item.GetCurrentUserPrice(_selectedDataContext))"
                                                                           Size="Size.Small"/>
                                                        </MudTooltip>
                                                    }
                                                </MudTd>
                                            </MudTr>
                                        }
                                    }
                                </ChildRowContent>
                            </MudTable>
                        </MudPaper>
                    </MudItem>
                    <MudItem md="6" lg="5" Class="pa-2 d-flex flex-column">
                        <MudPaper Style="background-color: var(--mud-palette-background)" Elevation="0" Class="flex-grow-1 pa-2">
                            <MudTable Items="@PriceCalculatorService.GetCategorizedItemOrTagsForDisplay(_selectedDataContext).ToSell"
                                      Filter="new Func<ItemOrTag, bool>(FilterItemToSell)"
                                      Class="mud-table-container-no-overflow-y recipe-table"
                                      Dense="true"
                                      GroupBy="_groupDefinitionToSell"
                                      Hover="true"
                                      Virtualize="false">
                                <ToolBarContent>
                                    <MudText Typo="Typo.h6">@LocalizationService.GetTranslation("PriceCalculator.ItemsToSell")</MudText>
                                    <MudSpacer/>
                                    <MudAutocomplete T="Recipe"
                                                     Value="_emptyRecipe"
                                                     Disabled="@(UserServerDataService.GetAvailableRecipes().Count == 0)"
                                                     SearchFunc="SearchRecipes"
                                                     ValueChanged="AddUserRecipe"
                                                     Placeholder="@LocalizationService.GetTranslation("PriceCalculator.AddRecipe")"
                                                     Class="auto-complete-input"
                                                     Dense="true"
                                                     MaxItems="null"
                                                     Variant="Variant.Outlined"
                                                     AnchorOrigin="Origin.BottomLeft"
                                                     TransformOrigin="Origin.TopLeft">
                                        <ItemTemplate>
                                            <MudStack Row Class="pl-2" Spacing="2">
                                                <EcoIcon Item="@context.Elements.FirstOrDefault(e => e.IsProduct() && e.Index == 0)?.ItemOrTag" Size="24"></EcoIcon>
                                                <MudText>@LocalizationService.GetTranslation(context)</MudText>
                                            </MudStack>
                                        </ItemTemplate>
                                    </MudAutocomplete>
                                </ToolBarContent>
                                <HeaderContent>
                                    <MudTh Style="width: 26px; padding: 0 0 0 4px;">
                                        <MudIconButton Icon="@(_showDetailedRecipes ? MDIIcons.Outline.FolderOpen : MDIIcons.Outline.Folder)"
                                                       Size="Size.Small"
                                                       tabindex="-1"
                                                       Color="Color.Primary"
                                                       OnClick="@(() => ShowDetailedRecipes = !_showDetailedRecipes)"/>
                                    </MudTh>
                                    <MudTh Class="pl-4">
                                        <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                            <MudTextField @bind-Value="_searchItemToSell"
                                                          Clearable
                                                          Immediate
                                                          Placeholder="@LocalizationService.GetTranslation("PriceCalculator.ProductItems")"
                                                          Adornment="Adornment.Start"
                                                          AdornmentIcon="@Icons.Material.Filled.Search"
                                                          IconSize="Size.Small"
                                                          Class="mt-0 small-text-field"/>
                                        </MudStack>
                                    </MudTh>
                                    <MudTh>
                                        <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                            <MudText Typo="Typo.body2">@LocalizationService.GetTranslation("PriceCalculator.CostPrice")</MudText>
                                            <MudIcon Icon="@MDIIcons.Filled.ArrowRightThin" Size="Size.Small"/>
                                            <MudIconButton Color="Color.Primary" Icon="@(ShowMarginNames ? MDIIcons.Outline.AlphaABox : MDIIcons.Outline.PercentBox)" Size="Size.Small" OnClick="@(() => ShowMarginNames = !ShowMarginNames)"/>
                                            <MudText Typo="Typo.body2">@LocalizationService.GetTranslation("PriceCalculator.SalePrice")</MudText>
                                        </MudStack>
                                    </MudTh>
                                    <MudTh>
                                    </MudTh>
                                </HeaderContent>
                                <GroupHeaderTemplate>
                                    <MudTh Class="mud-background-gray pl-8" colspan="5">
                                        @(context.Key is not null ? LocalizationService.GetTranslation((IHasLocalizedName)context.Key) : LocalizationService.GetTranslation("NoSkill"))
                                        [@context.Items.Count()]
                                    </MudTh>
                                </GroupHeaderTemplate>
                                <RowTemplate>
                                    @{
                                        var relatedUserElements = UserServerDataService.UserElements
                                            .Where(ue => ue.Element.IsProduct()
                                                         && ue.Element.ItemOrTag == context
                                                         && !ue.IsReintegrated)
                                            .ToList();

                                        var bestRecipe = ExtractBestRecipe(context, relatedUserElements);
                                        var bestRecipeHasShare = bestRecipe?.Elements.Count(e => e.IsProduct()) > 1;

                                        <MudTd Style="width: 0; padding: 0; vertical-align: top; padding-top: 9px;"
                                               Class="@($"{(relatedUserElements.Count > 1 && _showDetailedRecipes ? "border-b-0" : "")} border-r-1")">
                                            <MudTooltip Text="@LocalizationService.GetTranslation("PriceCalculator.AddOverride")">
                                                <MudIconButton Size="Size.Small"
                                                               tabindex="-1"
                                                               Icon="@MDIIcons.Filled.ChevronDoubleLeft"
                                                               OnClick="@(() => OverridePrice(true, context.GetCurrentUserPrice(_selectedDataContext)!))"/>
                                            </MudTooltip>
                                        </MudTd>

                                        <MudTd Class="@(relatedUserElements.Count > 1 && _showDetailedRecipes ? "border-b-0" : "")">
                                            <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                                <MudTooltip Text="@LocalizationService.GetTranslation(bestRecipeHasShare ? "PriceCalculator.RecipeTooltipWithShare" : "PriceCalculator.RecipeTooltip")">
                                                    <MudLink Color="Color.Default" OnClick="@(() => ShowRecipeDialog(bestRecipe))">
                                                        <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                                            <EcoIcon Item="@context"/>
                                                            <MudText Typo="Typo.body2" Class="pt-1 ">
                                                                @LocalizationService.GetTranslation(context)
                                                            </MudText>
                                                            @if (!_showDetailedRecipes && relatedUserElements.Count > 1)
                                                            {
                                                                <MudText Typo="Typo.body2" Class="pt-1">
                                                                    [@relatedUserElements.Count]
                                                                </MudText>
                                                            }
                                                        </MudStack>
                                                    </MudLink>
                                                </MudTooltip>
                                            </MudStack>
                                        </MudTd>

                                        <MudTd Class="@(relatedUserElements.Count > 1 && _showDetailedRecipes ? "border-b-0" : "")">
                                            <MudStack Row AlignItems="AlignItems.Center" Spacing="0">
                                                <MudTooltip Disabled="@(context.GetCurrentUserPrice(_selectedDataContext)!.Price is not null)" Text="@LocalizationService.GetTranslation("PriceCalculator.PriceTooltip.isAutoCalculatedPrice")">
                                                    <MudNumericField T="decimal?"
                                                                     FullWidth="false"
                                                                     Class="mt-0 small-adornment flex-no-grow rectangle-input"
                                                                     Style="width: 101px;"
                                                                     HideSpinButtons="true"
                                                                     Format="0.##"
                                                                     Disabled="true"
                                                                     Value="@context.GetCurrentUserPrice(_selectedDataContext)!.Price"
                                                                     Culture="CultureInfo.CurrentUICulture"
                                                                     Adornment="@(context.GetCurrentUserPrice(_selectedDataContext)!.Price is not null ? Adornment.None : Adornment.End)"
                                                                     AdornmentIcon="@MDIIcons.Outline.Information"
                                                                     AdornmentColor="Color.Warning"
                                                                     Variant="Variant.Outlined"/>
                                                </MudTooltip>
                                                <MudIcon Icon="@MDIIcons.Filled.ArrowRightThin" Size="Size.Small" Class="mx-2"/>
                                                <div class="margin-select-container">
                                                    <MudSelect T="UserMargin"
                                                               Adornment="Adornment.None"
                                                               Value="context.GetCurrentUserPrice(_selectedDataContext)!.UserMargin"
                                                               ValueChanged="@(value => ChangeUserPriceMargin(context.GetCurrentUserPrice(_selectedDataContext), value))"
                                                               ToStringFunc="@(um => ShowMarginNames ? "None" : ((um?.Margin ?? 0).ToString("0.##") + " %"))"
                                                               Class="margin-select"
                                                               Dense="true"
                                                               Variant="Variant.Outlined"
                                                               AnchorOrigin="Origin.BottomLeft"
                                                               TransformOrigin="Origin.TopLeft">
                                                        @foreach (var userMargin in UserServerDataService.UserMargins)
                                                        {
                                                            <MudSelectItem T="UserMargin"
                                                                           Value="userMargin">
                                                                @(ShowMarginNames ? userMargin.Name : userMargin.Margin.ToString("0.##") + " %")
                                                            </MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                </div>
                                                @{
                                                    var hasMarginPriceError = context.GetCurrentUserPrice(_selectedDataContext)!.Price is not null && context.GetCurrentUserPrice(_selectedDataContext)!.MarginPrice is null;

                                                    <MudTooltip Disabled="@(!hasMarginPriceError)"
                                                                Text="@LocalizationService.GetTranslation("PriceCalculator.MarginTooltip")">
                                                        <MudNumericField T="decimal?"
                                                                         Class="mt-0 small-adornment flex-no-grow rectangle-input margin-price"
                                                                         Style="width: 85px"
                                                                         HideSpinButtons="true"
                                                                         Format="0.##"
                                                                         Disabled="true"
                                                                         Culture="CultureInfo.CurrentUICulture"
                                                                         Adornment="@(hasMarginPriceError ? Adornment.End : Adornment.None)"
                                                                         AdornmentIcon="@MDIIcons.Outline.Information"
                                                                         AdornmentColor="Color.Warning"
                                                                         Value="@context.GetCurrentUserPrice(_selectedDataContext)!.MarginPrice"
                                                                         Variant="Variant.Outlined"/>
                                                    </MudTooltip>
                                                }

                                                @if (context.GetCurrentUserPrice(_selectedDataContext).Price is not null)
                                                {
                                                    <MudIconButton Icon="@Icons.Material.Outlined.ContentCopy"
                                                                   Size="Size.Small"
                                                                   OnClick="@(() => CopyToClipboard(context.GetCurrentUserPrice(_selectedDataContext)!.MarginPrice))"/>
                                                }
                                            </MudStack>
                                        </MudTd>
                                        <MudTd Class="@($"{(relatedUserElements.Count > 1 && _showDetailedRecipes ? "border-b-0" : "")} px-1")">
                                            <MudStack Row Spacing="2">
                                                <MudIconButton Icon="@(relatedUserElements.Count > 1 ? Icons.Material.Filled.PlaylistRemove : Icons.Material.Filled.Clear)"
                                                               tabindex="-1"
                                                               Size="Size.Small"
                                                               OnClick="@(() => RemoveUserRecipes(UserServerDataService.UserRecipes.Where(ur => relatedUserElements.Select(ue => ue.Element.Recipe).Contains(ur.Recipe)).ToList()))"/>
                                            </MudStack>
                                        </MudTd>
                                    }
                                </RowTemplate>
                                <ChildRowContent>
                                    @if (_showDetailedRecipes)
                                    {
                                        var relatedElements = UserServerDataService.UserElements
                                            .Where(ue => ue.Element.IsProduct()
                                                         && ue.Element.ItemOrTag == context
                                                         && !ue.IsReintegrated)
                                            .ToList();

                                        @if (relatedElements.Count > 1)
                                        {
                                            @foreach (var userElement in relatedElements)
                                            {
                                                var borderClass = relatedElements.Last() == userElement ? "" : "border-b-0";

                                                <MudTr>
                                                    <!-- This empty MudTd must stay due to the collapse of the GroupBy -->
                                                    <MudTd></MudTd>
                                                    <MudTd Class="@($"{borderClass} pa-0 border-r-1")"></MudTd>
                                                    <MudTd Class="@($"{borderClass} pt-0 pb-1")"
                                                           Style="white-space: nowrap; overflow: hidden; max-width: 280px">
                                                        <MudStack Row Spacing="1">
                                                            <MudIcon Icon="@MDIIcons.Filled.ArrowRightBottom"
                                                                     Size="Size.Small"/>
                                                            <MudLink Color="Color.Default" Class="pt-1 " Typo="Typo.body2" OnClick="@(() => ShowRecipeDialog(userElement.Element.Recipe))">
                                                                @LocalizationService.GetTranslation(userElement.Element.Recipe) @LocalizationService.GetTranslation("Recipe")
                                                            </MudLink>
                                                        </MudStack>
                                                    </MudTd>
                                                    <MudTd Class="@($"{borderClass} pt-0 pb-1")">
                                                        <MudStack Row>
                                                            <MudTooltip Text="@(context.GetCurrentUserPrice(_selectedDataContext)!.PrimaryUserElement == userElement ? LocalizationService.GetTranslation("PriceCalculator.CancelFavoriteRecipe") : LocalizationService.GetTranslation("PriceCalculator.AddFavoriteRecipe"))">
                                                                <MudIconButton tabindex="-1"
                                                                               Style="margin-right: -12px"
                                                                               Color="Color.Primary"
                                                                               Icon="@(context.GetCurrentUserPrice(_selectedDataContext)!.PrimaryUserElement == userElement ? Icons.Material.Filled.Star : Icons.Material.Filled.StarOutline)"
                                                                               Size="Size.Small"
                                                                               OnClick="@(() => SetPrimaryElement(context.GetCurrentUserPrice(_selectedDataContext), userElement))"/>
                                                            </MudTooltip>
                                                            <MudNumericField T="decimal?"
                                                                             Style="width: 75px"
                                                                             Class="flex-no-grow small-adornment rectangle-input"
                                                                             HideSpinButtons="true"
                                                                             Format="0.##"
                                                                             Disabled="true"
                                                                             Value="@userElement.Price"
                                                                             Variant="Variant.Outlined"
                                                                             Culture="CultureInfo.CurrentUICulture"/>
                                                        </MudStack>
                                                    </MudTd>
                                                    <MudTd Class="@($"{borderClass} pt-0 pb-1 px-1")">
                                                        <MudIconButton Icon="@Icons.Material.Filled.Clear"
                                                                       aria-label="delete"
                                                                       tabindex="-1"
                                                                       Size="Size.Small"
                                                                       OnClick="@(() => RemoveUserRecipe(userElement.Element.Recipe.GetCurrentUserRecipe(_selectedDataContext)!))"/>
                                                    </MudTd>
                                                </MudTr>
                                            }
                                        }
                                    }
                                </ChildRowContent>
                            </MudTable>
                        </MudPaper>
                    </MudItem>
                </ChildContent>
                <ErrorContent>
                    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                        <MudAlert Severity="Severity.Error">@LocalizationService.GetTranslation("PriceCalculator.LoadError")</MudAlert>
                        <MudButton Variant="Variant.Filled" StartIcon="@MDIIcons.Filled.DeleteForever" Color="Color.Error" OnClick="@(() => RemoveAllUserData())">@LocalizationService.GetTranslation("PriceCalculator.Reset")</MudButton>
                    </MudStack>
                </ErrorContent>
            </ErrorBoundary>
        }
    </MudGrid>
</MudContainer>

@code {
    private bool _showDetailedTags;
    private bool ShowDetailedTags
    {
        set
        {
            _showDetailedTags = value;
            _ = LocalStorageService.AddItem("ShowDetailedTags", value.ToString());
        }
    }

    private bool _showDetailedRecipes;
    private bool ShowDetailedRecipes
    {
        set
        {
            _showDetailedRecipes = value;
            _ = LocalStorageService.AddItem("ShowDetailedRecipes", value.ToString());
        }
    }

    private bool _expandedSkills;
    private bool ExpandedSkills
    {
        get => _expandedSkills;
        set
        {
            _expandedSkills = value;
            _ = LocalStorageService.AddItem("ExpandedSkills", value.ToString());
        }
    }

    private bool _expandedCraftingTables;
    private bool ExpandedCraftingTables
    {
        get => _expandedCraftingTables;
        set
        {
            _expandedCraftingTables = value;
            _ = LocalStorageService.AddItem("ExpandedCraftingTables", value.ToString());
        }
    }

    private bool _expandedMargins;
    private bool ExpandedMargins
    {
        get => _expandedMargins;
        set
        {
            _expandedMargins = value;
            _ = LocalStorageService.AddItem("ExpandedMargins", value.ToString());
        }
    }

    private bool _expandedOptions;
    private bool ExpandedOptions
    {
        get => _expandedOptions;
        set
        {
            _expandedOptions = value;
            _ = LocalStorageService.AddItem("ExpandedOptions", value.ToString());
        }
    }

    private bool _showMarginNames;
    private bool ShowMarginNames
    {
        get => _showMarginNames;
        set
        {
            _showMarginNames = value;
            _ = LocalStorageService.AddItem("ShowMarginNames", value.ToString());
        }
    }

    private bool _isLoadingData;

    private DataContext? _selectedDataContext;

    private Skill? _emptySkill;
    private Recipe? _emptyRecipe;
    private CraftingTable? _emptyCraftingTable;
    private string? _previousProfession;

    private ItemOrTag? _selectedTagToBuy;
    private string _searchTagToBuy = "";

    private ItemOrTag? _selectedItemToSell;
    private string _searchItemToSell = "";

    private TableGroupDefinition<ItemOrTag> _groupDefinitionToSell;

    protected override void OnInitialized()
    {
        ContextService.OnContextChanged += OnContextChanged;

        _groupDefinitionToSell = new TableGroupDefinition<ItemOrTag>
        {
            GroupName = "Temporary",
            Indentation = true,
            Expandable = true,
            IsInitiallyExpanded = true,
            Selector = itemOrTag =>
            {
                var relatedElements = itemOrTag.Elements.Where(element => element.GetCurrentUserElement(_selectedDataContext) is not null && element.IsProduct() && !element.GetCurrentUserElement(_selectedDataContext)!.IsReintegrated).ToList();
                var bestRelatedElement = relatedElements.Find(element => element.Index == 0) ?? relatedElements.FirstOrDefault();

                return bestRelatedElement?.Recipe.Skill;
            }
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _showDetailedTags = await LocalStorageService.GetItem("ShowDetailedTags") != "False";
            _showDetailedRecipes = await LocalStorageService.GetItem("ShowDetailedRecipes") != "False";
            _expandedSkills = await LocalStorageService.GetItem("ExpandedSkills") != "False";
            _expandedCraftingTables = await LocalStorageService.GetItem("ExpandedCraftingTables") != "False";
            _expandedMargins = await LocalStorageService.GetItem("ExpandedMargins") != "False";
            _expandedOptions = await LocalStorageService.GetItem("ExpandedOptions") != "False";
            _showMarginNames = await LocalStorageService.GetItem("ShowMarginNames") == "True";

            var lastDataContextId = await LocalStorageService.GetItem("DataContextId");
            _selectedDataContext = string.IsNullOrEmpty(lastDataContextId)
                ? null
                : ContextService.CurrentUserServer!.DataContexts.FirstOrDefault(dc => dc.Id == new Guid(lastDataContextId));

            await RetrieveData(_selectedDataContext);

            StateHasChanged();
        }
    }

    private async Task RetrieveData(DataContext? dataContext = null)
    {
        _selectedDataContext = dataContext ?? ContextService.CurrentUserServer!.DataContexts.First(d => d.IsDefault);
        await LocalStorageService.AddItem("DataContextId", _selectedDataContext.Id.ToString());

        if (UserServerDataService.IsDataRetrieved && ServerDataService.IsDataRetrieved)
        {
            StateHasChanged();
            return;
        }

        _isLoadingData = true;
        StateHasChanged();

        if (!ServerDataService.IsDataRetrieved)
            await ServerDataService.RetrieveServerData(ContextService.CurrentServer!);

        if (!UserServerDataService.IsDataRetrieved)
            await UserServerDataService.RetrieveUserData(_selectedDataContext);

        _isLoadingData = false;
        StateHasChanged();
    }

    private void OnContextChanged()
    {
        _ = RetrieveData();
    }

    public void Dispose()
    {
        ContextService.OnContextChanged -= OnContextChanged;
    }

    private Task<IEnumerable<Skill>> SearchSkills(string value, CancellationToken token)
    {
        IEnumerable<Skill> result;

        if (string.IsNullOrEmpty(value))
        {
            result = UserServerDataService.GetAvailableSkills();
        }
        else
        {
            result = UserServerDataService.GetAvailableSkills()
                .Where(s => LocalizationService.GetTranslation(s).Contains(value, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        result = result.Where(s => s.Profession is not null).OrderBy(s => s.Profession);

        return Task.FromResult(result);
    }

    private async Task ToggleTalent(List<Talent> talents, bool forceRemove = false)
    {
        var isRemove = talents.All(t => t.GetCurrentUserTalent(_selectedDataContext) is not null);

        foreach (var talent in talents)
        {
            if (isRemove || forceRemove)
            {
                UserServerDataService.RemoveUserTalent(talent.GetCurrentUserTalent(_selectedDataContext)!);
            }
            else
            {
                var selectedTalentsWithSameLevel = UserServerDataService.UserTalents
                    .Where(ut => ut.Talent.Skill == talents.First().Skill && ut.Talent.Level == talents.First().Level && !talents.Contains(ut.Talent))
                    .Select(ut => ut.Talent)
                    .ToList();

                if (selectedTalentsWithSameLevel.Count > 0)
                {
                    await ToggleTalent(selectedTalentsWithSameLevel, true);
                }

                UserServerDataService.AddUserTalent(talent, _selectedDataContext!);
            }
        }

        await EcoCraftDbContext.SaveChangesAsync();
        await Calculate();
    }

    private Task<IEnumerable<Recipe>> SearchRecipes(string value, CancellationToken token)
    {
        IEnumerable<Recipe> result;

        if (string.IsNullOrEmpty(value))
        {
            result = UserServerDataService.GetAvailableRecipes();
        }
        else
        {
            result = UserServerDataService.GetAvailableRecipes()
                .Where(r => LocalizationService.GetTranslation(r).Contains(value, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        result = result.OrderBy(r => r.Name);

        return Task.FromResult(result);
    }

    private async Task RemoveAllUserData()
    {
        var isAdmin = ContextService.CurrentUserServer!.IsAdmin;

        await ContextService.LeaveServer(ContextService.CurrentUserServer!);
        await ContextService.ChangeServer(ContextService.CurrentServer!, isAdmin);

        Navigation.NavigateTo("/", forceLoad: true);
    }

    private Task<IEnumerable<CraftingTable>> SearchCraftingTables(string value, CancellationToken token)
    {
        IEnumerable<CraftingTable> result;

        if (string.IsNullOrEmpty(value))
        {
            result = UserServerDataService.GetAvailableCraftingTables();
        }
        else
        {
            result = UserServerDataService.GetAvailableCraftingTables()
                .Where(s => LocalizationService.GetTranslation(s).Contains(value, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        result = result.OrderBy(c => LocalizationService.GetTranslation(c.Name));

        return Task.FromResult(result);
    }

    private async Task SelectDataContext(DataContext dataContext)
    {
        await UserServerDataService.RetrieveUserData(null);
        await RetrieveData(dataContext);
    }

    private async Task DeleteDataContext(DataContext dataContext)
    {
        if (dataContext.IsDefault)
            return;

        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", LocalizationService.GetTranslation("DataContext.DeletionConfirmation", dataContext.Name));
        if (!confirmed) return;

        DataContextDbService.Delete(dataContext);
        await EcoCraftDbContext.SaveChangesAsync();

        if (_selectedDataContext == dataContext)
        {
            _selectedDataContext = ContextService.CurrentUserServer!.DataContexts.First(d => d.IsDefault);
            await UserServerDataService.RetrieveUserData(null);
            await RetrieveData(_selectedDataContext);
        }
    }

    private async Task AddDataContext()
    {
        var dataContext = await ContextService.AddDataContext(ContextService.CurrentUserServer!);
        await EcoCraftDbContext.SaveChangesAsync();
        await UserServerDataService.RetrieveUserData(null);
        await RetrieveData(dataContext);
    }

    private async Task AddUserSkill(Skill? skill)
    {
        if (skill is null)
        {
            return;
        }

        UserServerDataService.AddUserSkill(skill, _selectedDataContext!, UserServerDataService.UserSetting!.OnlyLevelAccessibleRecipes);
        _emptySkill = null;

        await EcoCraftDbContext.SaveChangesAsync();
        await Calculate();
    }

    private async Task RemoveUserSkill(UserSkill skill)
    {
        UserServerDataService.RemoveUserSkill(skill);

        await EcoCraftDbContext.SaveChangesAsync();
        await Calculate();
    }

    private async Task AddUserCraftingTable(CraftingTable? craftingTable)
    {
        if (craftingTable is null)
        {
            return;
        }

        UserServerDataService.AddUserCraftingTable(craftingTable, _selectedDataContext!, true);
        _emptyCraftingTable = null;

        await EcoCraftDbContext.SaveChangesAsync();
        await Calculate();
    }

    private async Task RemoveUserCraftingTable(UserCraftingTable craftingTable)
    {
        UserServerDataService.RemoveUserCraftingTable(craftingTable);
        await EcoCraftDbContext.SaveChangesAsync();
        await Calculate();
    }

    private async Task AddUserRecipe(Recipe? recipe)
    {
        if (recipe is null)
        {
            return;
        }

        UserServerDataService.AddUserRecipe(recipe, _selectedDataContext!);
        _emptyRecipe = null;

        await EcoCraftDbContext.SaveChangesAsync();
        await Calculate();
    }

    private async Task RemoveUserRecipe(UserRecipe recipe)
    {
        UserServerDataService.RemoveUserRecipe(recipe);
        await EcoCraftDbContext.SaveChangesAsync();
        await Calculate();
    }

    private async Task SetPrimaryElement(UserPrice userPrice, UserElement userElement)
    {
        userPrice.PrimaryUserElement = userPrice.PrimaryUserElement == userElement ? null : userElement;
        await EcoCraftDbContext.SaveChangesAsync();
        await Calculate();
    }

    private async Task RemoveUserRecipes(List<UserRecipe> recipes)
    {
        foreach (var recipe in recipes)
        {
            UserServerDataService.RemoveUserRecipe(recipe);
        }
        await EcoCraftDbContext.SaveChangesAsync();
        await Calculate();
    }

    private async Task OnLevelChanged(UserSkill userSkill, int newLevel)
    {
        if (userSkill.Level == newLevel) return;

        var isIncrease = newLevel - userSkill.Level > 0;
        userSkill.Level = newLevel;

        if (UserServerDataService.UserSetting!.OnlyLevelAccessibleRecipes)
        {
            UserServerDataService.UserSkillLevelChange(userSkill, _selectedDataContext!, isIncrease);
        }

        if (!isIncrease) {
            foreach (var talent in userSkill.Skill!.Talents.Where(t => t.GetCurrentUserTalent(_selectedDataContext) is not null && newLevel < t.Level))
            {
                UserServerDataService.RemoveUserTalent(talent.GetCurrentUserTalent(_selectedDataContext)!);
            }
        }
        await EcoCraftDbContext.SaveChangesAsync();
        await Calculate();
    }

    private async Task OnOptionDisplayChanged()
    {
        UserServerDataService.UserSetting!.DisplayNonSkilledRecipes = !UserServerDataService.UserSetting.DisplayNonSkilledRecipes;
        UserServerDataService.ToggleEmptyUserSkill(_selectedDataContext!, UserServerDataService.UserSetting!.DisplayNonSkilledRecipes);
        await EcoCraftDbContext.SaveChangesAsync();
    }

    private async Task OnOptionOnlyLevelChanged()
    {
        UserServerDataService.UserSetting!.OnlyLevelAccessibleRecipes = !UserServerDataService.UserSetting.OnlyLevelAccessibleRecipes;
        UserServerDataService.RecalculateUserRecipes(_selectedDataContext!);
        await Calculate();
    }

    private async Task OnOptionApplyMarginBetweenSkillsChanged()
    {
        UserServerDataService.UserSetting!.ApplyMarginBetweenSkills = !UserServerDataService.UserSetting.ApplyMarginBetweenSkills;
        await Calculate();
    }

    private async Task OnOptionMarginTypeChanged(MarginType marginType)
    {
        UserServerDataService.UserSetting!.MarginType = marginType;
        await EcoCraftDbContext.SaveChangesAsync();
        await Calculate();
    }

    private async Task UpdateCalorieCost(decimal calorieCost)
    {
        UserServerDataService.UserSetting!.CalorieCost = calorieCost;
        UserServerDataService.UpdateUserSetting(UserServerDataService.UserSetting);
        await EcoCraftDbContext.SaveChangesAsync();
        await Calculate();
    }

    private async Task UpdateMargin(UserMargin userMargin, decimal margin)
    {
        userMargin.Margin = margin;
        await EcoCraftDbContext.SaveChangesAsync();
        await Calculate();
    }

    private async Task UpdateMarginName(UserMargin userMargin, string name)
    {
        userMargin.Name = name;
        await EcoCraftDbContext.SaveChangesAsync();
    }

    private async Task OnAddMargin()
    {
        UserServerDataService.CreateUserMargin(_selectedDataContext!);
        await EcoCraftDbContext.SaveChangesAsync();
    }

    private async Task OnRemoveMargin(UserMargin userMargin)
    {
        if(UserServerDataService.UserMargins.Count == 1)
        {
            Snackbar.Add(LocalizationService.GetTranslation("PriceCalculator.Snackbar.CantRemoveLastMargin"), Severity.Error);
            return;
        }
        UserServerDataService.RemoveUserMargin(userMargin);
        await EcoCraftDbContext.SaveChangesAsync();
        await Calculate();
    }

    private async Task ChangeUserPriceMargin(UserPrice userPrice, UserMargin userMargin)
    {
        userPrice.UserMargin = userMargin;
        UserPriceDbService.Update(userPrice);
        await Calculate();
    }

    private async Task UpdatePriceCalculation(UserPrice userPrice, decimal? value)
    {
        userPrice.Price = value;
        UserPriceDbService.Update(userPrice);
        await Calculate();
    }

    private Recipe ExtractBestRecipe(ItemOrTag itemOrTag, List<UserElement> userElements)
    {

        if (itemOrTag.GetCurrentUserPrice(_selectedDataContext!)?.PrimaryUserElement is not null)
        {
            return itemOrTag.GetCurrentUserPrice(_selectedDataContext!)!.PrimaryUserElement!.Element.Recipe;
        }

        var elementToConsider = userElements.FirstOrDefault(ue => ue.Price == null) ?? userElements.MinBy(ue => ue.Price)!;

        return elementToConsider.Element.Recipe;
    }

    private async Task ShowRecipeDialog(Recipe recipe)
    {
        var parameters = new DialogParameters
        {
            ["DataContext"] = _selectedDataContext,
            ["Recipe"] = recipe,
        };
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth=true, CloseButton = true, MaxWidth = MaxWidth.Large };

        var dialog = await DialogService.ShowAsync<RecipeDialog>(LocalizationService.GetTranslation(recipe), parameters, options);
        var result = await dialog.Result;

        StateHasChanged();
    }

    private void UpdateDataContextValues(string name)
    {
        _selectedDataContext!.Name = name;
        DataContextDbService.Update(_selectedDataContext);
        EcoCraftDbContext.SaveChanges();
    }

    private async Task ShowCraftingTableDialog(CraftingTable craftingTable)
    {
        var parameters = new DialogParameters
        {
            ["CraftingTable"] = craftingTable,
        };
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth=true, CloseButton = true, MaxWidth = MaxWidth.Medium };
        await DialogService.ShowAsync<CraftingTableDialog>(LocalizationService.GetTranslation(craftingTable), parameters, options);
    }

    private async Task ShowSkillDialog(Skill skill)
    {
        var parameters = new DialogParameters
        {
            ["Skill"] = skill,
        };
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth=true, CloseButton = true, MaxWidth = MaxWidth.Medium };
        await DialogService.ShowAsync<SkillDialog>(LocalizationService.GetTranslation(skill), parameters, options);
    }

    private async Task ShowItemOrTagDialog(ItemOrTag itemOrTag)
    {
        var parameters = new DialogParameters
        {
            ["ItemOrTag"] = itemOrTag,
        };
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth=true, CloseButton = true, MaxWidth = MaxWidth.Medium };
        await DialogService.ShowAsync<ItemOrTagDialog>(LocalizationService.GetTranslation(itemOrTag), parameters, options);
    }

    private async Task SetPrimaryUserPrice(UserPrice userPrice, UserPrice target)
    {
        userPrice.PrimaryUserPrice = userPrice.PrimaryUserPrice == target ? null : target;
        await Calculate();
    }

    private async Task UpdateCraftMinuteFee(UserCraftingTable userCraftingTable, decimal value)
    {
        userCraftingTable.CraftMinuteFee = value;
        await Calculate();
    }

    private async Task OverridePrice(bool value, UserPrice userPrice)
    {
        userPrice.OverrideIsBought = value;
        await Calculate();
    }

    private async Task CopyToClipboard(decimal? price)
    {
        if (price is null)
        {
            Snackbar.Add(LocalizationService.GetTranslation("PriceCalculator.Snackbar.PriceNotWellConfigured"), Severity.Warning);
            return;
        }

        var text = Math.Round((double) price, 2, MidpointRounding.AwayFromZero).ToString("0.00");
        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        Snackbar.Add(LocalizationService.GetTranslation("PriceCalculator.Snackbar.PriceCopied"), Severity.Success);
    }

    private async Task IncreasePluginModule(UserCraftingTable userCraftingTable, List<PluginModule> pluginModules)
    {
        var currentIndex = pluginModules.FindIndex(pm => pm == userCraftingTable.PluginModule);

        if (currentIndex == pluginModules.Count - 1)
        {
            return;
        }

        userCraftingTable.PluginModule = pluginModules[currentIndex + 1];

        await Calculate();
    }

    private async Task DecreasePluginModule(UserCraftingTable userCraftingTable, List<PluginModule> pluginModules)
    {
        var currentIndex = pluginModules.FindIndex(pm => pm == userCraftingTable.PluginModule);

        switch (currentIndex)
        {
            case -1:
                return;
            case 0:
                userCraftingTable.PluginModule = null;
                break;
            default:
                userCraftingTable.PluginModule = pluginModules[currentIndex - 1];
                break;
        }

        userCraftingTable.SkilledPluginModules.Clear();
        await Calculate();
    }

    private async Task ToggleSkilledPluginModule(UserCraftingTable userCraftingTable, PluginModule pluginModule)
    {
        if (userCraftingTable.SkilledPluginModules.Contains(pluginModule))
        {
            userCraftingTable.SkilledPluginModules.Remove(pluginModule);
        }
        else
        {
            userCraftingTable.SkilledPluginModules.Add(pluginModule);
        }

        await Calculate();
    }

    private bool FilterTagToBuy(ItemOrTag itemOrTag)
    {
        return FilterItemOrTag(itemOrTag, _searchTagToBuy, _selectedTagToBuy);
    }

    private bool FilterItemToSell(ItemOrTag itemOrTag)
    {
        return FilterItemOrTag(itemOrTag, _searchItemToSell, _selectedItemToSell);
    }

    private bool FilterItemOrTag(ItemOrTag itemOrTag, string search, ItemOrTag? specificTag = null)
    {
        if (specificTag is not null && !itemOrTag.AssociatedTags.Contains(specificTag))
            return false;
        if (string.IsNullOrWhiteSpace(search))
            return true;
        if (itemOrTag.Name.Contains(search, StringComparison.OrdinalIgnoreCase))
            return true;
        if (LocalizationService.GetTranslation(itemOrTag).Contains(search, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task OpenServerPricesDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth=true, CloseButton = true, MaxWidth = MaxWidth.Medium };
        await DialogService.ShowAsync<ServerPricesDialog>("", options);
    }

    private async Task Calculate()
    {
        await PriceCalculatorService.Calculate(_selectedDataContext!);
        StateHasChanged();
    }
}
