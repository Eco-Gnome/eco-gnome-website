@page "/"
@implements IDisposable
@using ecocraft.Components.Dialog
@using ecocraft.Extensions
@using ecocraft.Models
@using ecocraft.Services
@using ecocraft.Services.DbServices
@using System.Globalization;
@inject IDialogService DialogService
@inject ContextService ContextService
@inject LocalStorageService LocalStorageService
@inject ServerDataService ServerDataService
@inject UserServerDataService UserServerDataService
@inject UserPriceDbService UserPriceDbService
@inject PriceCalculatorService PriceCalculatorService
@inject EcoCraftDbContext EcoCraftDbContext
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<PageTitle>Price Calculator - Eco Gnome</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-0">
    <MudGrid Style="height: auto">
        <MudItem md="12" lg="3" Class="pa-2 d-flex flex-column">
            <MudPaper Style="background-color: var(--mud-palette-background)" Elevation="0" Class="flex-grow-1 pa-2">

                <MudExpansionPanels MultiExpansion="true">
                    <MudExpansionPanel Text="@($"Skills ({UserServerDataService.UserSkills.Where(us => us.Skill is not null).ToList().Count})")" @bind-Expanded="ExpandedSkills">
                        <MudAutocomplete T="Skill"
                                         Value="_emptySkill"
                                         Disabled="@(UserServerDataService.GetAvailableSkills().Count == 0)"
                                         SearchFunc="SearchSkills"
                                         ValueChanged="AddUserSkill"
                                         Placeholder="Add skill"
                                         Dense="true"
                                         Class="auto-complete-input"
                                         MaxItems="null"
                                         Variant="Variant.Outlined"
                                         AnchorOrigin="Origin.BottomLeft"
                                         TransformOrigin="Origin.TopLeft">
                            <ItemTemplate>
                                @if (!string.IsNullOrEmpty(context.Profession) && _previousProfession != context.Profession)
                                {
                                    <MudText Color="Color.Primary" Typo="Typo.caption">@ContextService.GetTranslation(ServerDataService.Skills.First(s => s.Name == context.Profession))</MudText>
                                }
                                <MudText>@ContextService.GetTranslation(context)</MudText>
                                @{
                                    _previousProfession = context.Profession;
                                }
                            </ItemTemplate>
                        </MudAutocomplete>

                        <MudTable Items="UserServerDataService.UserSkills.Where(us => us.Skill is not null)"
                                  Hover="true"
                                  Dense="true"
                                  Class="mt-4">
                            <HeaderContent>
                                <MudTh>Name</MudTh>
                                <MudTh>Level</MudTh>
                                <MudTh></MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd Class="pa-1">
                                    <MudLink Color="Color.Default" OnClick="@(() => ShowSkillDialog(context.Skill))">
                                        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexStart">
                                            <IconSprite ImageUrl=@context.Skill.imageFile XPos="@(context.Skill.posX ?? 0)" YPos="@(context.Skill.posY ?? 0)" IconSize="32"/>
                                            <MudText Typo="Typo.body2">@ContextService.GetTranslation(context.Skill)</MudText>
                                        </MudStack>
                                    </MudLink>
                                </MudTd>
                                <MudTd>
                                    <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexStart" Spacing="6">
                                        <MudNumericField T="int"
                                                         Value="@context.Level"
                                                         Class="square-input flex-no-grow"
                                                         Min="1"
                                                         Max="7"
                                                         Variant="Variant.Outlined"
                                                         Immediate="true"
                                                         ValueChanged="(int newValue) => OnLevelChanged(context, newValue)" />
                                        <MudCheckBox Value="context.HasLavishTalent"
                                                     Class="dense-checkbox"
                                                     Style="@($"visibility: {(context.Level >= 6 && context.Skill.LavishTalentValue is not null ? "visible" : "hidden")}")"
                                                     Label="Lavish talent"
                                                     Color="Color.Primary"
                                                     ValueChanged="(bool newLavishTalent) => OnLavishTalentChanged(context, newLavishTalent)" />
                                    </MudStack>
                                </MudTd>
                                <MudTd Style="text-align: right">
                                    <MudIconButton Icon="@Icons.Material.Filled.Clear"
                                                   aria-label="delete"
                                                   tabindex="-1"
                                                   Size="Size.Small"
                                                   OnClick="@(() => RemoveUserSkill(context))" />
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudExpansionPanel>

                    <MudExpansionPanel Text="@($"Crafting tables ({UserServerDataService.UserCraftingTables.Count})")" @bind-Expanded="ExpandedCraftingTables">
                        <MudAutocomplete T="CraftingTable"
                                         Value="_emptyCraftingTable"
                                         Disabled="@(UserServerDataService.GetAvailableCraftingTables().Count == 0)"
                                         SearchFunc="SearchCraftingTables"
                                         ValueChanged="AddUserCraftingTable"
                                         Placeholder="Add crafting table"
                                         Dense="true"
                                         Class="mt-4 auto-complete-input"
                                         MaxItems="null"
                                         Variant="Variant.Outlined"
                                         AnchorOrigin="Origin.BottomLeft"
                                         TransformOrigin="Origin.TopLeft">
                            <ItemTemplate>
                                <MudText>@ContextService.GetTranslation(context)</MudText>
                            </ItemTemplate>
                        </MudAutocomplete>

                        <MudTable Items="UserServerDataService.UserCraftingTables"
                                  FixedHeader="true"
                                  Hover="true"
                                  Class="mt-4"
                                  Dense="true">
                            <HeaderContent>
                                <MudTh>Name</MudTh>
                                <MudTh>Upgrade</MudTh>
                                <MudTh Class="px-1">Cost per min</MudTh>
                                <MudTh Class="px-1"></MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd Class="pa-1">
                                    <MudLink Color="Color.Default" OnClick="@(() => ShowCraftingTableDialog(context.CraftingTable))">
                                        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexStart">
                                            <IconSprite ImageUrl=@context.CraftingTable.imageFile XPos="@(context.CraftingTable.posX ?? 0)" YPos="@(context.CraftingTable.posY ?? 0)" IconSize="32"/>
                                            <MudText Typo="Typo.body2">@ContextService.GetTranslation(context.CraftingTable)</MudText>
                                        </MudStack>
                                    </MudLink>
                                </MudTd>
                                <MudTd>
                                    @if (context.CraftingTable.PluginModules.Count > 0)
                                    {
                                        <MudSelect T="PluginModule"
                                                   Class="select-dense very-dense no-wrap-select"
                                                   Placeholder="Choose a module"
                                                   Value="context.PluginModule"
                                                   ValueChanged="@(value => ChangePluginModule(context, value))"
                                                   Dense="true"
                                                   Typo="Typo.body2"
                                                   Variant="Variant.Outlined"
                                                   ToStringFunc="@(pm => pm == null ? "No Module" : pm.Name)"
                                                   AnchorOrigin="Origin.BottomLeft"
                                                   TransformOrigin="Origin.TopLeft">
                                            <MudSelectItem T="PluginModule" Value="@null">No Module</MudSelectItem>
                                            @foreach (var pluginModule in context.CraftingTable.PluginModules.OrderByDescending(pm => pm.Percent))
                                            {
                                                <MudSelectItem T="PluginModule"
                                                               Value="@pluginModule">
                                                    <MudText Typo="Typo.body2">
                                                        @ContextService.GetTranslation(pluginModule)
                                                    </MudText>
                                                </MudSelectItem>
                                            }
                                        </MudSelect>
                                    }
                                </MudTd>
                                <MudTd Class="px-1">
                                    <MudNumericField T="float"
                                                     Style="max-width: 85px;height: 35px;"
                                                     Class="rectangle-input"
                                                     Format="N2"
                                                     ValueChanged="@(v => UpdateCraftMinuteFee(context, v))"
                                                     Converter="@CultureInvariantConverter.DotOrCommaFloat"
                                                     Value="@context.CraftMinuteFee"
                                                     Variant="Variant.Outlined" />
                                </MudTd>
                                <MudTd Class="px-1">
                                    <MudIconButton Icon="@Icons.Material.Filled.Clear"
                                                   aria-label="delete"
                                                   tabindex="-1"
                                                   Size="Size.Small"
                                                   OnClick="@(() => RemoveUserCraftingTable(context))" />
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudExpansionPanel>

                    <MudExpansionPanel Text="@($"Margins ({UserServerDataService.UserMargins.Count})")" @bind-Expanded="ExpandedMargins">
                        @if (UserServerDataService.UserSetting is not null)
                        {
                            <MudTable Items="UserServerDataService.UserMargins"
                                      FixedHeader="true"
                                      Hover="true"
                                      Class="mt-4"
                                      Dense="true">
                                <HeaderContent>
                                    <MudTh>Name</MudTh>
                                    <MudTh>Value</MudTh>
                                    <MudTh></MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd Class="py-1">
                                        <MudTextField Value="context.Name"
                                                        Typo="Typo.body2"
                                                        Style="border-bottom-color: gray"
                                                        ValueChanged="@((string v) => UpdateMarginName(context, v))" />
                                    </MudTd>
                                    <MudTd Class="py-1">
                                        <MudNumericField T="float"
                                                            Class="rectangle-input"
                                                            Style="height: 35px; width: 110px"
                                                            Value="context.Margin"
                                                            Min="0"
                                                            Adornment="Adornment.End"
                                                            AdornmentText="% "
                                                            Converter="@CultureInvariantConverter.DotOrCommaFloat"
                                                            ValueChanged="@(v => UpdateMargin(context, v))"
                                                            Variant="Variant.Outlined" />
                                    </MudTd>
                                    <MudTd Class="py-1" Style="text-align: right;">
                                        <MudTooltip Text="Remove margin">
                                            <MudIconButton Icon="@Icons.Material.Filled.Clear"
                                                            tabindex="-1"
                                                            Size="Size.Small"
                                                            OnClick="@(() => OnRemoveMargin(context))" />
                                        </MudTooltip>
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                            @if (_showMargins)
                            {
                                <MudStack Row Class="mt-1" Style="width: 100%" Justify="Justify.Center" AlignItems="AlignItems.Center">
                                    <MudButton Class="py-1"
                                               StartIcon="@Icons.Material.Filled.Add"
                                               tabindex="-1"
                                               OnClick="OnAddMargin">Add margin</MudButton>
                                </MudStack>
                            }
                        }
                    </MudExpansionPanel>

                    <MudExpansionPanel Text="Options" @bind-Expanded="ExpandedOptions">
                        @if (UserServerDataService.UserSetting is not null)
                        {
                            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                <MudText>Display non-skilled recipes</MudText>
                                <MudCheckBox T="bool" Value="UserServerDataService.UserSetting.DisplayNonSkilledRecipes" Variant="Variant.Outlined" ValueChanged="OnOptionDisplayChanged" />
                            </MudStack>
                            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                <MudText>Only level-accessible recipes</MudText>
                                <MudCheckBox T="bool" Value="UserServerDataService.UserSetting.OnlyLevelAccessibleRecipes" Variant="Variant.Outlined" ValueChanged="OnOptionOnlyLevelChanged" />
                            </MudStack>
                        }
                        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                            <MudText>Cost per 1000 calories</MudText>
                            @if (UserServerDataService.UserSetting is not null)
                            {
                                <div>
                                    <MudNumericField T="float"
                                                     ValueChanged="UpdateCalorieCost"
                                                     Style="height: 35px; width: 100px"
                                                     Value="UserServerDataService.UserSetting.CalorieCost"
                                                     Converter="@CultureInvariantConverter.DotOrCommaFloat"
                                                     Variant="Variant.Outlined" />
                                </div>
                            }
                        </MudStack>
                    </MudExpansionPanel>
                </MudExpansionPanels>
            </MudPaper>
        </MudItem>

        <MudItem md="6" lg="4" Class="pa-2 d-flex flex-column">
            <MudPaper Style="background-color: var(--mud-palette-background)" Elevation="0" Class="flex-grow-1 pa-2">
                <MudTable Items="@(PriceCalculatorService.GetCategorizedItemOrTagsForDisplay().ToBuy)"
                          Filter="new Func<ItemOrTag,bool>(FilterTagToBuy)"
                          Dense="true"
                          Hover="true">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Items to buy</MudText>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh Class="pl-1">
                            <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                <MudIconButton Size="Size.Small"
                                               tabindex="-1"
                                               Color="Color.Primary"
                                               Icon="@(_showDetailedTags ? MDIIcons.Outline.FolderOpen : MDIIcons.Outline.Folder)"
                                               OnClick="@(() => ShowDetailedTags = !_showDetailedTags)"/>
                                <MudTextField @bind-Value="_searchTagToBuy" Immediate Placeholder="Ingredient Items Or Tags" Adornment="Adornment.Start"
                                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                            </MudStack>
                        </MudTh>
                        <MudTh>Buy price</MudTh>
                        <MudTh Style="width: 0; padding: 0"></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        @{
                            var userPriceItemOrTag = UserServerDataService.UserPrices.First(up => up.ItemOrTag == context);

                            <MudTd Class="@(context.AssociatedItems.Any() && _showDetailedTags ? "border-b-0" : "")">
                                <MudLink Color="Color.Default" OnClick="@(() => ShowItemOrTagDialog(context))">
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                        <IconSprite ImageUrl=@context.imageFile XPos="@(context.posX ?? 0)" YPos="@(context.posY ?? 0)" IconSize="32" />
                                        <MudText Typo="Typo.body2">@ContextService.GetTranslation(context)</MudText>

                                        @if (!_showDetailedTags && context.AssociatedItems.Count > 0)
                                        {
                                            <MudText Typo="Typo.body2">[@(context.AssociatedItems.Count)]</MudText>
                                        }

                                        @if (context.IsTag)
                                        {
                                            <MudIcon Icon="@MDIIcons.Outline.Tag" Size="Size.Small" />
                                        }
                                    </MudStack>
                                </MudLink>
                                @if (!_showDetailedTags && userPriceItemOrTag.PrimaryUserPrice is not null)
                                {
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Class="pl-6">
                                        <MudIcon Size="Size.Small" Icon="@MDIIcons.Filled.ArrowUpLeft"/>
                                        <MudText Typo="Typo.body2" Style="position: relative; top: 4px">
                                            @ContextService.GetTranslation(userPriceItemOrTag.PrimaryUserPrice.ItemOrTag)
                                        </MudText>
                                    </MudStack>
                                }
                            </MudTd>
                            <MudTd Class="@(context.AssociatedItems.Any() && _showDetailedTags ? "border-b-0" : "")" Style="position: relative;">
                                <MudStack Row AlignItems="AlignItems.Center">
                                    <MudTooltip Disabled="@(!context.IsTag || userPriceItemOrTag.Price is not null)"
                                                Text="This value will be the minimum price of it's related items (if all values are defined !), unless you choose a specific
                                                one by clicking a star.">
                                        <MudNumericField T="float?"
                                                         Class="rectangle-input small-adornment"
                                                         Style="width: 111px"
                                                         ReadOnly="@(context.IsTag)"
                                                         HideSpinButtons="@(context.IsTag)"
                                                         Value="userPriceItemOrTag.Price"
                                                         Immediate="true"
                                                         Format="N2"
                                                         Variant="Variant.Outlined"
                                                         Converter="@CultureInvariantConverter.DotOrCommaFloatNull"
                                                         Min="context.MinPrice"
                                                         Max="context.MaxPrice"
                                                         Adornment="@(context.IsTag && userPriceItemOrTag.Price is null ? Adornment.End : Adornment.None)"
                                                         AdornmentIcon="@MDIIcons.Outline.Information"
                                                         AdornmentColor="Color.Warning"
                                                         ValueChanged="@(value => UpdatePriceCalculation(userPriceItemOrTag, value))"/>
                                    </MudTooltip>
                                    @if (!context.IsTag && userPriceItemOrTag.Price is not null)
                                    {
                                        <MudIconButton Icon="@Icons.Material.Outlined.ContentCopy"
                                                       tabindex="-1"
                                                       OnClick="() => CopyToClipboard(userPriceItemOrTag.Price)"
                                                       Size="Size.Small"/>
                                    }
                                </MudStack>
                            </MudTd>

                            <MudTd Style="width: 0; padding: 0;"
                                   Class="@($"{(context.AssociatedItems.Any() && _showDetailedTags ? "border-b-0" : "")} {(userPriceItemOrTag.OverrideIsBought ? "border-l-1" : "")}")">
                                @if (userPriceItemOrTag.OverrideIsBought)
                                {
                                    <MudTooltip Text="Don't override this product price anymore.">
                                        <MudIconButton Icon="@MDIIcons.Filled.ChevronDoubleRight"
                                                       tabindex="-1"
                                                       OnClick="() => OverridePrice(false, userPriceItemOrTag)"
                                                       Size="Size.Small" />
                                    </MudTooltip>
                                }
                            </MudTd>
                        }
                    </RowTemplate>
                    <ChildRowContent>
                        @if (_showDetailedTags)
                        {
                            @foreach (var item in context.AssociatedItems)
                            {
                                var userPriceTag = UserServerDataService.UserPrices.First(up => up.ItemOrTag == context);
                                var userPriceItem = UserServerDataService.UserPrices.First(up => up.ItemOrTag == item);

                                <MudTr>
                                    <MudTd Class="@($"pt-0 pb-1 {(context.AssociatedItems.Last() == item ? "" : "border-b-0")}")">
                                        <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                            <MudIcon Icon="@MDIIcons.Filled.ArrowRightBottom"
                                                     Size="Size.Small"/>
                                            <MudLink Color="Color.Default" OnClick="@(() => ShowItemOrTagDialog(item))">
                                                <MudText Typo="Typo.body2" Class="pt-1">@ContextService.GetTranslation(item)</MudText>
                                            </MudLink>
                                        </MudStack>
                                    </MudTd>

                                    <MudTd Class="@($"pt-0 pb-1 {(context.AssociatedItems.Last() == item ? "" : "border-b-0")}")">
                                        <MudStack Row Style="position: relative;">
                                            <MudIconButton tabindex="-1"
                                                           Style="margin-right: -12px"
                                                           Color="Color.Primary"
                                                           Icon="@(userPriceTag.PrimaryUserPrice == userPriceItem ? Icons.Material.Filled.Star : Icons.Material.Filled.StarOutline)"
                                                           Size="Size.Small"
                                                           OnClick="@(() => SetPrimaryUserPrice(userPriceTag, userPriceItem))"/>
                                            <MudTooltip Disabled="@(!PriceCalculatorService.GetCategorizedItemOrTags().ToSell.Contains(item) || userPriceItem.OverrideIsBought)"
                                                        Text="This value is automatically calculated by the system.">
                                                <MudNumericField T="float?"
                                                                 Class="rectangle-input small-adornment"
                                                                 Style="width: 85px"
                                                                 HideSpinButtons="@(PriceCalculatorService.GetCategorizedItemOrTags().ToSell.Contains(item) && !userPriceItem.OverrideIsBought)"
                                                                 Format="N2"
                                                                 Disabled="@(PriceCalculatorService.GetCategorizedItemOrTags().ToSell.Contains(item) && !userPriceItem.OverrideIsBought)"
                                                                 Value="userPriceItem.Price"
                                                                 Immediate="true"
                                                                 Min="item.MinPrice"
                                                                 Max="item.MaxPrice"
                                                                 Converter="@CultureInvariantConverter.DotOrCommaFloatNull"
                                                                 ValueChanged="@(value => UpdatePriceCalculation(userPriceItem, value))"
                                                                 Adornment="@(PriceCalculatorService.GetCategorizedItemOrTags().ToSell.Contains(item) && !userPriceItem.OverrideIsBought ? Adornment.End : Adornment.None)"
                                                                 AdornmentIcon="@MDIIcons.Filled.Calculator"
                                                                 Variant="Variant.Outlined"/>
                                            </MudTooltip>
                                            @if (!PriceCalculatorService.GetCategorizedItemOrTags().ToSell.Contains(item) || userPriceItem.OverrideIsBought)
                                            {
                                                <MudIconButton Icon="@Icons.Material.Outlined.ContentCopy"
                                                               tabindex="-1"
                                                               OnClick="() => CopyToClipboard(userPriceItem.Price)"
                                                               Size="Size.Small"/>
                                            }
                                        </MudStack>
                                    </MudTd>
                                    <MudTd Class="@($"pa-0 {(userPriceItem.OverrideIsBought ? "border-l-1" : "")} {(context.AssociatedItems.Last() == item ? "" : "border-b-0")}")">
                                        @if (userPriceItem.OverrideIsBought)
                                        {
                                            <MudTooltip Text="Don't override this product price anymore.">
                                                <MudIconButton Icon="@MDIIcons.Filled.ChevronDoubleRight"
                                                               tabindex="-1"
                                                               OnClick="() => OverridePrice(false, userPriceItem)"
                                                               Size="Size.Small" />
                                            </MudTooltip>
                                        }
                                    </MudTd>
                                </MudTr>
                            }
                        }
                    </ChildRowContent>
                </MudTable>
            </MudPaper>
        </MudItem>

        <MudItem md="6" lg="5" Class="pa-2 d-flex flex-column">
            <MudPaper Style="background-color: var(--mud-palette-background)" Elevation="0" Class="flex-grow-1 pa-2">
                <MudTable Items="PriceCalculatorService.GetCategorizedItemOrTagsForDisplay().ToSell"
                          Filter="new Func<ItemOrTag,bool>(FilterItemToSell)"
                          Class="mud-table-container-no-overflow-y recipe-table"
                          Dense="true"
                          GroupBy="_groupDefinitionToSell"
                          Hover="true">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Items to sell</MudText>
                        <MudSpacer/>
                        <MudAutocomplete T="Recipe"
                                         Value="_emptyRecipe"
                                         Disabled="@(UserServerDataService.GetAvailableRecipes().Count == 0)"
                                         SearchFunc="SearchRecipes"
                                         ValueChanged="AddUserRecipe"
                                         Placeholder="Add recipe"
                                         Class="auto-complete-input"
                                         Dense="true"
                                         MaxItems="null"
                                         Variant="Variant.Outlined"
                                         AnchorOrigin="Origin.BottomLeft"
                                         TransformOrigin="Origin.TopLeft">
                            <ItemTemplate>
                                <MudText>@ContextService.GetTranslation(context)</MudText>
                            </ItemTemplate>
                        </MudAutocomplete>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh Style="width: 26px; padding: 0 0 0 4px;">
                            <MudIconButton Icon="@(_showDetailedRecipes ? MDIIcons.Outline.FolderOpen : MDIIcons.Outline.Folder)"
                                           Size="Size.Small"
                                           tabindex="-1"
                                           Color="Color.Primary"
                                           OnClick="@(() => ShowDetailedRecipes = !_showDetailedRecipes)"/>
                        </MudTh>
                        <MudTh Class="pl-4">
                            <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                <MudTextField @bind-Value="_searchItemToSell" Immediate Placeholder="Product Items" Adornment="Adornment.Start"
                                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                            </MudStack>
                        </MudTh>
                        <MudTh>Prices wo/w margin</MudTh>
                        <MudTh colspan="2">
                        </MudTh>
                    </HeaderContent>
                    <GroupHeaderTemplate>
                        <MudTh Class="mud-background-gray pl-8" colspan="5">@context.Key [@context.Items.Count()]</MudTh>
                    </GroupHeaderTemplate>
                    <RowTemplate>
                        @{
                            var userPrice = UserServerDataService.UserPrices.First(up => up.ItemOrTag == context);
                            var relatedUserElements = UserServerDataService.UserElements
                                .Where(ue => ue.Element.IsProduct()
                                             && ue.Element.ItemOrTag == context
                                             && !ue.IsReintegrated)
                                .ToList();

                            <MudTd Style="width: 0; padding: 0; vertical-align: top; padding-top: 9px;"
                                   Class="@($"{(relatedUserElements.Count > 1 && _showDetailedRecipes ? "border-b-0" : "")} border-r-1")">
                                <MudTooltip Text="Override this price, considering it's not a product to sell but a product to buy">
                                    <MudIconButton Size="Size.Small"
                                                   tabindex="-1"
                                                   Icon="@MDIIcons.Filled.ChevronDoubleLeft"
                                                   OnClick="@(() => OverridePrice(true, userPrice))"/>
                                </MudTooltip>
                            </MudTd>

                            <MudTd Class="@(relatedUserElements.Count > 1 && _showDetailedRecipes ? "border-b-0" : "")">
                                <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                    @if (relatedUserElements.First()?.Element.Recipe.Elements.Count(e => e.IsProduct()) == 1)
                                    {
                                        <MudTooltip Text="Open recipe popup, it displays details of calculation">
                                            <MudLink Color="Color.Default" OnClick="@(() => ShowRecipeDialog(relatedUserElements.First().Element.Recipe))">
                                                <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                                    <IconSprite ImageUrl=@context.imageFile XPos="@(context.posX ?? 0)" YPos="@(context.posY ?? 0)" IconSize="32" />
                                                    <MudText Typo="Typo.body2" Class="pt-1">
                                                        @ContextService.GetTranslation(context)
                                                    </MudText>
                                                </MudStack>
                                            </MudLink>
                                        </MudTooltip>
                                    }
                                    else
                                    {
                                        <MudTooltip Text="Open recipe popup, it gives ability to control the product price repartition and displays details of calculation">
                                            <MudLink Color="Color.Default" OnClick="@(() => ShowRecipeDialog(relatedUserElements.First().Element.Recipe))">
                                                <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                                    <IconSprite ImageUrl=@context.imageFile XPos="@(context.posX ?? 0)" YPos="@(context.posY ?? 0)" IconSize="32" />
                                                    <MudText Typo="Typo.body2" Class="pt-1">
                                                        @ContextService.GetTranslation(context)
                                                    </MudText>
                                                    @if (!_showDetailedRecipes && relatedUserElements.Count > 1)
                                                    {
                                                        <MudText Typo="Typo.body2" Class="pt-1">
                                                            [@relatedUserElements.Count]
                                                        </MudText>
                                                    }
                                                </MudStack>
                                            </MudLink>
                                        </MudTooltip>
                                    }
                                </MudStack>
                                @if (!_showDetailedRecipes && userPrice.PrimaryUserElement is not null)
                                {
                                    <MudStack Row Spacing="1" AlignItems="AlignItems.Center" Class="pl-6">
                                        <MudIcon Size="Size.Small" Icon="@MDIIcons.Filled.ArrowUpLeft"/>
                                        <MudLink Color="Color.Default" Typo="Typo.body2" OnClick="@(() => ShowRecipeDialog(userPrice.PrimaryUserElement.Element.Recipe))">
                                            <MudText Class="pt-1" Typo="Typo.body2">
                                                @ContextService.GetTranslation(userPrice.PrimaryUserElement.Element.Recipe) Recipe
                                            </MudText>
                                        </MudLink>
                                    </MudStack>
                                }
                                </MudTd>

                            <MudTd Class="@(relatedUserElements.Count > 1 && _showDetailedRecipes ? "border-b-0" : "")">
                                <MudStack Row>
                                    <MudNumericField T="float?"
                                                     FullWidth="false"
                                                     Class="mt-0 small-adornment flex-no-grow rectangle-input"
                                                     Style="width: 101px;"
                                                     HideSpinButtons="true"
                                                     Format="N2"
                                                     ReadOnly="true"
                                                     Value="userPrice.Price"
                                                     Culture="CultureInfo.CurrentUICulture"
                                                     Variant="Variant.Outlined"/>
                                    <MudNumericField T="float?"
                                                     Class="mt-0 small-adornment flex-no-grow rectangle-input"
                                                     Style="width: 95px"
                                                     HideSpinButtons="true"
                                                     Format="N2"
                                                     ReadOnly="true"
                                                     Adornment="@(userPrice.Price is null ? Adornment.None : Adornment.End)"
                                                     AdornmentIcon="@Icons.Material.Outlined.ContentCopy"
                                                     AdornmentAriaLabel="Copy content"
                                                     OnAdornmentClick="@(() => CopyToClipboard(userPrice.Price * (1 + userPrice.UserMargin.Margin / 100)))"
                                                     Culture="CultureInfo.CurrentUICulture"
                                                     Value="@(userPrice.Price * (1 + userPrice.UserMargin.Margin / 100))"
                                                     Variant="Variant.Outlined"/>
                                </MudStack>
                            </MudTd>
                            <MudTd Class="@(relatedUserElements.Count > 1 && _showDetailedRecipes ? "border-b-0" : "")">
                                <MudSelect
                                    T="UserMargin"
                                    Value="userPrice.UserMargin"
                                    ValueChanged="@(value => ChangeUserPriceMargin(userPrice, value))"
                                    ToStringFunc="@(um => um.Margin + " %")"
                                    Class="select-dense very-dense"
                                    Dense="true"
                                    Variant="Variant.Outlined"
                                    AnchorOrigin="Origin.BottomLeft"
                                    TransformOrigin="Origin.TopLeft">
                                    @foreach (var userMargin in UserServerDataService.UserMargins)
                                    {
                                        <MudSelectItem T="UserMargin"
                                                       Value="userMargin">
                                            @userMargin.Margin %
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                            </MudTd>
                            <MudTd Class="@($"{(relatedUserElements.Count > 1 && _showDetailedRecipes ? "border-b-0" : "")} px-1")">
                                <MudStack Row Spacing="2">
                                    <MudIconButton Icon="@(relatedUserElements.Count > 1 ? Icons.Material.Filled.PlaylistRemove : Icons.Material.Filled.Clear)"
                                                   tabindex="-1"
                                                   Size="Size.Small"
                                                   OnClick="@(() => RemoveUserRecipes(UserServerDataService.UserRecipes.Where(ur => relatedUserElements.Select(ue => ue.Element.Recipe).Contains(ur.Recipe)).ToList()))"/>
                                </MudStack>
                            </MudTd>
                        }
                    </RowTemplate>
                    <ChildRowContent>
                        @if (_showDetailedRecipes)
                        {
                            var userPrice = UserServerDataService.UserPrices.First(up => up.ItemOrTag == context);
                            var relatedElements = UserServerDataService.UserElements
                                .Where(ue => ue.Element.IsProduct()
                                             && ue.Element.ItemOrTag == context
                                             && !ue.IsReintegrated)
                                .ToList();

                            @if (relatedElements.Count > 1)
                            {
                                @foreach (var userElement in relatedElements)
                                {
                                    <MudTr>
                                        <!-- This empty MudTd must stay due to the collapse of the GroupBy -->
                                        <MudTd></MudTd>
                                        <MudTd Class="@($"{(relatedElements.Last() == userElement ? "" : "border-b-0")} pa-0 border-r-1")"></MudTd>
                                        <MudTd Class="@($"{(relatedElements.Last() == userElement ? "" : "border-b-0")} pt-0 pb-1")"
                                               Style="white-space: nowrap;overflow: hidden; max-width: 280px">
                                            <MudStack Row Spacing="1">
                                                <MudIcon Icon="@MDIIcons.Filled.ArrowRightBottom"
                                                         Size="Size.Small"/>
                                                <MudLink Color="Color.Default" Class="pt-1" Typo="Typo.body2" OnClick="@(() => ShowRecipeDialog(userElement.Element.Recipe))">
                                                    @ContextService.GetTranslation(userElement.Element.Recipe) Recipe
                                                </MudLink>
                                            </MudStack>
                                        </MudTd>
                                        <MudTd Class="@($"{(relatedElements.Last() == userElement ? "" : "border-b-0")} pt-0 pb-1")">
                                            <MudStack Row>
                                                <MudIconButton tabindex="-1"
                                                               Style="margin-right: -12px"
                                                               Color="Color.Primary"
                                                               Icon="@(userPrice.PrimaryUserElement == userElement ? Icons.Material.Filled.Star : Icons.Material.Filled.StarOutline)"
                                                               Size="Size.Small"
                                                               OnClick="@(() => SetPrimaryElement(userPrice, userElement))"/>

                                                <MudNumericField T="float?"
                                                                 Style="width: 75px"
                                                                 Class="flex-no-grow small-adornment rectangle-input"
                                                                 HideSpinButtons="true"
                                                                 Format="N2"
                                                                 ReadOnly="true"
                                                                 Value="@userElement.Price"
                                                                 Variant="Variant.Outlined"
                                                                 Culture="CultureInfo.CurrentUICulture"/>
                                            </MudStack>
                                        </MudTd>
                                        <MudTd Class="@($"{(relatedElements.Last() == userElement ? "" : "border-b-0")} pt-0 pb-1 px-1")"></MudTd>
                                        <MudTd Class="@($"{(relatedElements.Last() == userElement ? "" : "border-b-0")} pt-0 pb-1 px-1")">
                                            <MudIconButton Icon="@Icons.Material.Filled.Clear"
                                                           aria-label="delete"
                                                           tabindex="-1"
                                                           Size="Size.Small"
                                                           OnClick="@(() => RemoveUserRecipe(UserServerDataService.UserRecipes.First(ur => ur.Recipe == userElement.Element.Recipe)))" />
                                        </MudTd>
                                    </MudTr>
                                }
                            }
                        }
                    </ChildRowContent>
                </MudTable>
            </MudPaper>
        </MudItem>

    </MudGrid>
</MudContainer>

@code {
    private bool _showMargins;
    private bool ShowMargins
    {
        set
        {
            _showMargins = value;
            _ = LocalStorageService.AddItem("ShowMargins", value.ToString());
        }
    }

    private bool _showDetailedTags;
    private bool ShowDetailedTags
    {
        set
        {
            _showDetailedTags = value;
            _ = LocalStorageService.AddItem("ShowDetailedTags", value.ToString());
        }
    }

    private bool _showDetailedRecipes;
    private bool ShowDetailedRecipes
    {
        set
        {
            _showDetailedRecipes = value;
            _ = LocalStorageService.AddItem("ShowDetailedRecipes", value.ToString());
        }
    }

    private bool _expandedSkills;
    private bool ExpandedSkills
    {
        get
        {
            return _expandedSkills;
        }
        set
        {
            _expandedSkills = value;
            _ = LocalStorageService.AddItem("ExpandedSkills", value.ToString());
        }
    }

    private bool _expandedCraftingTables;
    private bool ExpandedCraftingTables
    {
        get
        {
            return _expandedCraftingTables;
        }
        set
        {
            _expandedCraftingTables = value;
            _ = LocalStorageService.AddItem("ExpandedCraftingTables", value.ToString());
        }
    }

    private bool _expandedMargins;
    private bool ExpandedMargins
    {
        get
        {
            return _expandedMargins;
        }
        set
        {
            _expandedMargins = value;
            _ = LocalStorageService.AddItem("ExpandedMargins", value.ToString());
        }
    }

    private bool _expandedOptions;
    private bool ExpandedOptions
    {
        get
        {
            return _expandedOptions;
        }
        set
        {
            _expandedOptions = value;
            _ = LocalStorageService.AddItem("ExpandedOptions", value.ToString());
        }
    }

    private Skill? _emptySkill;
    private Recipe? _emptyRecipe;
    private CraftingTable? _emptyCraftingTable;
    private string? _previousProfession;

    private ItemOrTag? _selectedTagToBuy;
    private string _searchTagToBuy = "";

    private ItemOrTag? _selectedItemToSell;
    private string _searchItemToSell = "";

    private TableGroupDefinition<ItemOrTag>? _groupDefinitionToSell = new TableGroupDefinition<ItemOrTag>
    {
        GroupName = "Temporary",
        Indentation = true,
        Expandable = true,
        IsInitiallyExpanded = true,
        Selector = e => "All Skills"
    };

    protected override async Task OnInitializedAsync()
    {
        ContextService.OnContextChanged += StateHasChanged;

        _showMargins = await LocalStorageService.GetItem("ShowMargins") != "False";
        _showDetailedTags = await LocalStorageService.GetItem("ShowDetailedTags") != "False";
        _showDetailedRecipes = await LocalStorageService.GetItem("ShowDetailedRecipes") != "False";
        _expandedSkills = await LocalStorageService.GetItem("ExpandedSkills") != "False";
        _expandedCraftingTables = await LocalStorageService.GetItem("ExpandedCraftingTables") != "False";
        _expandedMargins = await LocalStorageService.GetItem("ExpandedMargins") != "False";
        _expandedOptions = await LocalStorageService.GetItem("ExpandedOptions") != "False";

        _groupDefinitionToSell = new TableGroupDefinition<ItemOrTag>
        {
            GroupName = "Skill",
            Indentation = true,
            Expandable = true,
            IsInitiallyExpanded = true,
            Selector = e =>
            {
                var firstRelatedUserElements = UserServerDataService.UserElements
                    .First(ue => ue.Element.IsProduct()
                                 && ue.Element.ItemOrTag == e
                                 && !ue.IsReintegrated);

                return firstRelatedUserElements?.Element.Recipe.Skill is not null
                    ? ContextService.GetTranslation(firstRelatedUserElements.Element.Recipe.Skill)
                    : "No Skill";
            },
        };
    }

    public void Dispose()
    {
        ContextService.OnContextChanged -= StateHasChanged;
    }

    private Task<IEnumerable<Skill>> SearchSkills(string value, CancellationToken token)
    {
        IEnumerable<Skill> result;

        if (string.IsNullOrEmpty(value))
        {
            result = UserServerDataService.GetAvailableSkills();
        }
        else
        {
            result = UserServerDataService.GetAvailableSkills()
                .Where(s => ContextService.GetTranslation(s).Contains(value, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        result = result.Where(s => s.Profession is not null).OrderBy(s => s.Profession);

        return Task.FromResult(result);
    }

    private Task<IEnumerable<Recipe>> SearchRecipes(string value, CancellationToken token)
    {
        IEnumerable<Recipe> result;

        if (string.IsNullOrEmpty(value))
        {
            result = UserServerDataService.GetAvailableRecipes();
        }
        else
        {
            result = UserServerDataService.GetAvailableRecipes()
                .Where(r => ContextService.GetTranslation(r).Contains(value, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        result = result.OrderBy(r => r.Name);

        return Task.FromResult(result);
    }

    private Task<IEnumerable<CraftingTable>> SearchCraftingTables(string value, CancellationToken token)
    {
        IEnumerable<CraftingTable> result;

        if (string.IsNullOrEmpty(value))
        {
            result = UserServerDataService.GetAvailableCraftingTables();
        }
        else
        {
            result = UserServerDataService.GetAvailableCraftingTables()
                .Where(s => ContextService.GetTranslation(s).Contains(value, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        result = result.OrderBy(c => c.Name);

        return Task.FromResult(result);
    }

    private async Task AddUserSkill(Skill? skill)
    {
        if (skill is null)
        {
            return;
        }

        UserServerDataService.AddUserSkill(skill, ContextService.CurrentUserServer!, UserServerDataService.UserSetting!.OnlyLevelAccessibleRecipes);

        _emptySkill = null;

        await PriceCalculatorService.Calculate();

        StateHasChanged();
    }

    private async Task RemoveUserSkill(UserSkill skill)
    {
        UserServerDataService.RemoveUserSkill(skill);
        await PriceCalculatorService.Calculate();
    }

    private async Task AddUserCraftingTable(CraftingTable? craftingTable)
    {
        if (craftingTable is null)
        {
            return;
        }

        UserServerDataService.AddUserCraftingTable(craftingTable, ContextService.CurrentUserServer!, true);

        _emptyCraftingTable = null;

        await PriceCalculatorService.Calculate();

        StateHasChanged();
    }

    private async Task RemoveUserCraftingTable(UserCraftingTable craftingTable)
    {
        UserServerDataService.RemoveUserCraftingTable(craftingTable);
        await PriceCalculatorService.Calculate();
    }

    private async Task AddUserRecipe(Recipe? recipe)
    {
        if (recipe is null)
        {
            return;
        }

        UserServerDataService.AddUserRecipe(recipe, ContextService.CurrentUserServer!);

        _emptyRecipe = null;

        await PriceCalculatorService.Calculate();

        StateHasChanged();
    }

    private async Task RemoveUserRecipe(UserRecipe recipe)
    {
        UserServerDataService.RemoveUserRecipe(recipe);

        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task SetPrimaryElement(UserPrice userPrice, UserElement userElement)
    {
        userPrice.PrimaryUserElement = userPrice.PrimaryUserElement == userElement ? null : userElement;
        await PriceCalculatorService.Calculate();
    }

    private async Task RemoveUserRecipes(List<UserRecipe> recipes)
    {
        foreach (var recipe in recipes)
        {
            UserServerDataService.RemoveUserRecipe(recipe);
        }

        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task OnLevelChanged(UserSkill userSkill, int newLevel)
    {
        if (userSkill.Level == newLevel) return;

        var isIncrease = newLevel - userSkill.Level > 0;
        userSkill.Level = newLevel;

        if (userSkill.Level < 7)
        {
            userSkill.HasLavishTalent = false;
        }

        if (UserServerDataService.UserSetting!.OnlyLevelAccessibleRecipes)
        {
            UserServerDataService.UserSkillLevelChange(userSkill, ContextService.CurrentUserServer!, isIncrease);
        }

        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task OnLavishTalentChanged(UserSkill userSkill, bool newLavishTalent)
    {
        userSkill.HasLavishTalent = newLavishTalent;

        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task ChangePluginModule(UserCraftingTable userCraftingTable, PluginModule? pluginModule)
    {
        userCraftingTable.PluginModule = pluginModule;
        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task OnOptionDisplayChanged()
    {
        UserServerDataService.UserSetting!.DisplayNonSkilledRecipes = !UserServerDataService.UserSetting.DisplayNonSkilledRecipes;
        UserServerDataService.ToggleEmptyUserSkill(ContextService.CurrentUserServer!, UserServerDataService.UserSetting!.DisplayNonSkilledRecipes);
        await EcoCraftDbContext.SaveChangesAsync();
    }

    private async Task OnOptionOnlyLevelChanged()
    {
        UserServerDataService.UserSetting!.OnlyLevelAccessibleRecipes = !UserServerDataService.UserSetting.OnlyLevelAccessibleRecipes;
        UserServerDataService.RecalculateUserRecipes(ContextService.CurrentUserServer);

        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task UpdateCalorieCost(float calorieCost)
    {
        UserServerDataService.UserSetting!.CalorieCost = calorieCost;
        UserServerDataService.UpdateUserSetting(UserServerDataService.UserSetting);
        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task UpdateMargin(UserMargin userMargin, float margin)
    {

        userMargin.Margin = margin;
        await EcoCraftDbContext.SaveChangesAsync();
    }

    private async Task UpdateMarginName(UserMargin userMargin, string name)
    {
        userMargin.Name = name;
        await EcoCraftDbContext.SaveChangesAsync();
    }

    private async Task OnAddMargin()
    {
        UserServerDataService.CreateUserMargin(ContextService.CurrentUserServer!);
        await EcoCraftDbContext.SaveChangesAsync();
    }

    private async Task OnRemoveMargin(UserMargin userMargin)
    {
        if(UserServerDataService.UserMargins.Count == 1)
        {
            Snackbar.Add("You can't remove your last margin", Severity.Error);
            return;
        }
        UserServerDataService.RemoveUserMargin(userMargin);
        await EcoCraftDbContext.SaveChangesAsync();
        StateHasChanged();
    }

    private async Task ChangeUserPriceMargin(UserPrice userPrice, UserMargin userMargin)
    {
        userPrice.UserMargin = userMargin;
        UserPriceDbService.Update(userPrice);
        await EcoCraftDbContext.SaveChangesAsync();
    }

    private async Task UpdatePriceCalculation(UserPrice userPrice, float? value)
    {
        userPrice.Price = value;
        UserPriceDbService.Update(userPrice);
        await PriceCalculatorService.Calculate();
        StateHasChanged();
    }

    private async Task ShowRecipeDialog(Recipe recipe)
    {
        var parameters = new DialogParameters
        {
            ["Recipe"] = recipe,
        };
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth=true, MaxWidth = MaxWidth.Medium };
        var dialog = DialogService.Show<RecipeDialog>(ContextService.GetTranslation(recipe), parameters, options);

        await dialog.Result;
        StateHasChanged();
    }

    private async Task ShowCraftingTableDialog(CraftingTable craftingTable)
    {
        var parameters = new DialogParameters
        {
            ["CraftingTable"] = craftingTable,
        };
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth=true, MaxWidth = MaxWidth.Medium };
        var dialog = DialogService.Show<CraftingTableDialog>(ContextService.GetTranslation(craftingTable), parameters, options);

        await dialog.Result;
    }

    private async Task ShowSkillDialog(Skill skill)
    {
        var parameters = new DialogParameters
        {
            ["Skill"] = skill,
        };
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth=true, MaxWidth = MaxWidth.Medium };
        var dialog = DialogService.Show<SkillDialog>(ContextService.GetTranslation(skill), parameters, options);

        await dialog.Result;
        StateHasChanged();
    }

    private async Task ShowItemOrTagDialog(ItemOrTag itemOrTag)
    {
        var parameters = new DialogParameters
        {
            ["ItemOrTag"] = itemOrTag,
        };
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth=true, MaxWidth = MaxWidth.Medium };
        var dialog = DialogService.Show<ItemOrTagDialog>(ContextService.GetTranslation(itemOrTag), parameters, options);

        await dialog.Result;
        StateHasChanged();
    }

    private async Task SetPrimaryUserPrice(UserPrice userPrice, UserPrice target)
    {
        userPrice.PrimaryUserPrice = userPrice.PrimaryUserPrice == target ? null : target;

        await PriceCalculatorService.Calculate();
    }

    private async Task UpdateCraftMinuteFee(UserCraftingTable userCraftingTable, float value)
    {
        userCraftingTable.CraftMinuteFee = value;
        await PriceCalculatorService.Calculate();
    }

    private async Task OverridePrice(bool value, UserPrice userPrice)
    {
        userPrice.OverrideIsBought = value;
        await PriceCalculatorService.Calculate();
    }

    private async Task CopyToClipboard(float? price)
    {
        if (price is null)
        {
            Snackbar.Add("This price isn't well configured", Severity.Warning);
            return;
        }

        var text = Math.Round((double) price,2).ToString("0.00");
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        Snackbar.Add("Price copied to clipboard", Severity.Success);
    }

    private void OnGlobalSearchChanged(KeyboardEventArgs args)
    {
        StateHasChanged(); // Redessiner la page pour que les filtres s'appliquent
    }

    private bool FilterTagToBuy(ItemOrTag itemOrTag)
    {
        return FilterItemOrTag(itemOrTag, _searchTagToBuy, _selectedTagToBuy);
    }

    private bool FilterItemToSell(ItemOrTag itemOrTag)
    {
        return FilterItemOrTag(itemOrTag, _searchItemToSell, _selectedItemToSell);
    }

    private bool FilterItemOrTag(ItemOrTag itemOrTag, string search, ItemOrTag? specificTag = null)
    {
        if (specificTag is not null && !itemOrTag.AssociatedTags.Contains(specificTag))
            return false;
        if (string.IsNullOrWhiteSpace(search))
            return true;
        if (itemOrTag.Name.Contains(search, StringComparison.OrdinalIgnoreCase))
            return true;
        if (ContextService.GetTranslation(itemOrTag).Contains(search, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }


}
