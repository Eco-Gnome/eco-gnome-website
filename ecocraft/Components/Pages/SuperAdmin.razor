@page "/super-admin"
@implements IDisposable
@inject IJSRuntime JsRuntime
@using ecocraft.Models
@using ecocraft.Services
@using ecocraft.Services.DbServices
@using ecocraft.Components.Utils
@inject ContextService ContextService
@inject EcoCraftDbContext DbContext
@inject NavigationManager Navigation
@inject UserDbService UserDbService
@inject ServerDbService ServerDbService
@inject ModUploadHistoryDbService ModUploadHistoryDbService
@inject ISnackbar Snackbar
@inject LocalizationService LocalizationService

<PageTitle>@LocalizationService.GetTranslation("SuperAdmin.Title") - Eco Gnome</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    @if (_isLoading)
    {
        <MudProgressLinear Color="Color.Tertiary" Indeterminate="true" Class="mb-6" />
    }

    <MudGrid>
        <MudItem lg="6" md="12">
            <MudTable Items="_users"
                      Filter="new Func<User, bool>(SearchUser)"
                      Virtualize="false"
                      FixedHeader="true"
                      Height="430px"
                      Dense="true"
                      Hover="true">
                <HeaderContent>
                    <MudTh>@LocalizationService.GetTranslation("SuperAdmin.IdCol")</MudTh>
                    <MudTh>@LocalizationService.GetTranslation("SuperAdmin.UserTable.PseudoCol")</MudTh>
                    <MudTh>@LocalizationService.GetTranslation("SuperAdmin.CreationDateCol")</MudTh>
                    <MudTh>@LocalizationService.GetTranslation("SuperAdmin.UserTable.ServersCol")</MudTh>
                    <MudTh>@LocalizationService.GetTranslation("SuperAdmin.UserTable.CanUploadModCol")</MudTh>
                    <MudTh>@LocalizationService.GetTranslation("SuperAdmin.UserTable.SuperAdminCol")</MudTh>
                    <MudTh>@LocalizationService.GetTranslation("SuperAdmin.UserTable.ActionCol")</MudTh>
                </HeaderContent>
                <ToolBarContent>
                    <MudStack Row Justify="Justify.SpaceBetween" Style="width: 100%">
                        <MudText Typo="Typo.h5">@LocalizationService.GetTranslation("SuperAdmin.UserTable.Title")</MudText>
                        <MudStack Style="width: 200px">
                            <MudTextField @bind-Value="_searchUser"
                                          Immediate
                                          Placeholder="Search"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Search"
                                          IconSize="Size.Small"
                                          Class="mt-0"/>
                        </MudStack>
                    </MudStack>
                </ToolBarContent>
                <RowTemplate>
                    <MudTd>
                        <MudTooltip Text="@context.Id.ToString()">
                            <MudIconButton Icon="@Icons.Material.Outlined.ContentCopy" Size="Size.Small" OnClick="@(() => CopyToClipboard(context.Id.ToString()))"/>
                        </MudTooltip>
                    </MudTd>
                    <MudTd>
                        @context.Pseudo
                    </MudTd>
                    <MudTd>
                        <MudTooltip Text="@context.CreationDateTime.ToString()">
                            <MudIcon Icon="@Icons.Material.Outlined.CalendarMonth" Size="Size.Small"/>
                        </MudTooltip>
                    </MudTd>
                    <MudTd>
                        <MudStack Row Spacing="0" Justify="Justify.Center" Class="gap-0">
                            @context.UserServers.Count
                            <MudTooltip Class="mr-4" Text=@LocalizationService.GetTranslation("SuperAdmin.UserTable.JoinedServers")>
                                <MudIcon Icon="@Icons.Material.Outlined.Dataset" Size="Size.Small"/>
                            </MudTooltip>
                            @context.UserServers.Count(us => us.IsAdmin)
                            <MudTooltip Text=@LocalizationService.GetTranslation("SuperAdmin.UserTable.HowMuchIsAdmin")>
                                <MudIcon Icon="@Icons.Material.Outlined.AdminPanelSettings" Size="Size.Small"/>
                            </MudTooltip>
                        </MudStack>
                    </MudTd>
                    <MudTd>
                        <MudIconButton Size="Size.Small"
                                       Icon="@(context.CanUploadMod ? MDIIcons.Filled.Upload : MDIIcons.Filled.UploadOff)"
                                       Color="@(context.CanUploadMod ? Color.Primary : Color.Default)"
                                       OnClick="() => ToggleCanUploadMod(context)"/>
                    </MudTd>
                    <MudTd>
                        <MudTooltip Text="@(context.SuperAdmin ? @LocalizationService.GetTranslation("SuperAdmin.UserTable.DemoteUser") : @LocalizationService.GetTranslation("SuperAdmin.UserTable.PromoteUser"))">
                            <MudIconButton Color="@(context.SuperAdmin ? Color.Tertiary : Color.Default)"
                                           Icon="@(context.SuperAdmin ? MDIIcons.Filled.Bank : MDIIcons.Filled.BankOff)"
                                           Size="Size.Small"
                                           OnClick="@(() => ToggleSuperAdmin(context))"/>
                        </MudTooltip>
                    </MudTd>
                    <MudTd>
                        <MudStack Row AlignItems="AlignItems.Center">
                            <MudTooltip Text=@LocalizationService.GetTranslation("SuperAdmin.UserTable.DeleteUser")>
                                <MudIconButton Icon="@Icons.Material.Filled.DeleteForever"
                                               Color="Color.Error"
                                               Size="Size.Small"
                                               OnClick="@(() => DeleteUser(context))"/>
                            </MudTooltip>
                        </MudStack>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50 }"/>
                </PagerContent>
            </MudTable>
        </MudItem>
        <MudItem lg="6" md="12">
            <MudTable Items="_servers"
                      Filter="new Func<Server, bool>(SearchServer)"
                      Virtualize="false"
                      FixedHeader="true"
                      Height="430px"
                      Dense="true"
                      Hover="true">
                <HeaderContent>
                    <MudTh>@LocalizationService.GetTranslation("SuperAdmin.IdCol")</MudTh>
                    <MudTh>@LocalizationService.GetTranslation("SuperAdmin.ServerTable.ServerNameCol")</MudTh>
                    <MudTh>@LocalizationService.GetTranslation("SuperAdmin.CreationDateCol")</MudTh>
                    <MudTh>@LocalizationService.GetTranslation("SuperAdmin.DataCol")</MudTh>
                    <MudTh>@LocalizationService.GetTranslation("JoinCode")</MudTh>
                    <MudTh>@LocalizationService.GetTranslation("SuperAdmin.ServerTable.PlayersCol")</MudTh>
                    <MudTh>@LocalizationService.GetTranslation("SuperAdmin.ServerTable.AdminsCol")</MudTh>
                    <MudTh>@LocalizationService.GetTranslation("SuperAdmin.ActionCol")</MudTh>
                </HeaderContent>
                <ToolBarContent>
                    <MudStack Row Justify="Justify.SpaceBetween" Style="width: 100%">
                        <MudText Typo="Typo.h5">@LocalizationService.GetTranslation("SuperAdmin.ServerTable.Title")</MudText>
                        <MudStack Style="width: 200px">
                            <MudTextField @bind-Value="_searchServer"
                                          Immediate
                                          Placeholder="Search"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Search"
                                          IconSize="Size.Small"
                                          Class="mt-0"/>
                        </MudStack>
                    </MudStack>
                </ToolBarContent>
                <RowTemplate>
                    <MudTd>
                        <MudTooltip Text="@context.Id.ToString()">
                            <MudIconButton Icon="@Icons.Material.Outlined.ContentCopy" Size="Size.Small" OnClick="@(() => CopyToClipboard(context.Id.ToString()))"/>
                        </MudTooltip>
                    </MudTd>
                    <MudTd>@(context.IsDefault ? "[Default]" : "") @context.Name</MudTd>
                    <MudTd>
                        <MudTooltip Text="@context.CreationDateTime.ToString()">
                            <MudIcon Icon="@Icons.Material.Outlined.CalendarMonth" Size="Size.Small"/>
                        </MudTooltip>
                    </MudTd>
                    <MudTd>
                        <MudIconButton Size="Size.Small" Color="Color.Default" Icon="@(context.IsEmpty ? MDIIcons.Outline.Battery : MDIIcons.Filled.BatteryHigh)"/>
                    </MudTd>
                    <MudTd>
                        @context.JoinCode
                    </MudTd>
                    <MudTd>
                        @context.UserServers.Count
                    </MudTd>
                    <MudTd>
                        @(string.Join(", ", context.UserServers.Where(us => us.IsAdmin).Select(us => us.GetPseudo())))
                    </MudTd>
                    <MudTd>
                        <MudStack Row AlignItems="AlignItems.Center">
                            <MudTooltip Text="@(ContextService.CurrentUser!.UserServers.FirstOrDefault(us => us.Server == context)?.IsAdmin ?? false ? LocalizationService.GetTranslation("SuperAdmin.ServerTable.DemoteAdmin") : LocalizationService.GetTranslation("SuperAdmin.ServerTable.PromoteAdmin"))">
                                <MudIconButton Icon="@(ContextService.CurrentUser!.UserServers.FirstOrDefault(us => us.Server == context)?.IsAdmin ?? false ? MDIIcons.Filled.Shield : MDIIcons.Filled.ShieldOff)"
                                               Size="Size.Small"
                                               Color="@(ContextService.CurrentUser!.UserServers.FirstOrDefault(us => us.Server == context)?.IsAdmin ?? false ? Color.Tertiary : Color.Default)"
                                               OnClick="@(() => ToggleSelfAdmin(context))"/>
                            </MudTooltip>
                            <MudTooltip Text="@(context.IsDefault ? LocalizationService.GetTranslation("SuperAdmin.ServerTable.UnsetDefault") : LocalizationService.GetTranslation("SuperAdmin.ServerTable.SetDefault"))">
                                <MudIconButton Icon="@(context.IsDefault ? MDIIcons.Filled.SmartCard : MDIIcons.Filled.SmartCardOff)"
                                               Color="@(context.IsDefault ? Color.Warning : Color.Default)"
                                               Size="Size.Small"
                                               OnClick="@(() => ToggleDefault(context))"/>
                            </MudTooltip>
                            @if (!context.IsDefault)
                            {
                                <MudTooltip Text=@LocalizationService.GetTranslation("SuperAdmin.ServerTable.DeleteServer")>
                                    <MudIconButton Icon="@Icons.Material.Filled.DeleteForever"
                                                   Color="Color.Error"
                                                   Size="Size.Small"
                                                   OnClick="@(() => DeleteServer(context))"/>
                                </MudTooltip>
                            }
                        </MudStack>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50 }"/>
                </PagerContent>
            </MudTable>
        </MudItem>
        <MudItem lg="6" md="12">
            <MudTable Items="@_modUploadHistories"
                      Virtualize="false"
                      FixedHeader="true"
                      Height="430px"
                      Dense="true"
                      Hover="true">
                <HeaderContent>
                    <MudTh>@LocalizationService.GetTranslation("SuperAdmin.IdCol")</MudTh>
                    <MudTh>@LocalizationService.GetTranslation("SuperAdmin.ModHistoryTable.FileNameCol")</MudTh>
                    <MudTh>@LocalizationService.GetTranslation("SuperAdmin.ModHistoryTable.FileSha1Col")</MudTh>
                    <MudTh>@LocalizationService.GetTranslation("SuperAdmin.ModHistoryTable.ServerCol")</MudTh>
                    <MudTh>@LocalizationService.GetTranslation("SuperAdmin.ModHistoryTable.IconsCountCol")</MudTh>
                    <MudTh>@LocalizationService.GetTranslation("SuperAdmin.CreationDateCol")</MudTh>
                    <MudTh>@LocalizationService.GetTranslation("SuperAdmin.ModHistoryTable.UserCol")</MudTh>
                </HeaderContent>
                <ToolBarContent>
                    <MudStack Row Justify="Justify.SpaceBetween" Style="width: 100%">
                        <MudText Typo="Typo.h5">@LocalizationService.GetTranslation("SuperAdmin.ModHistoryTable.Title")</MudText>
                        <ModUploader OnSuccessModUpload="RetrieveModUploadHistories" />
                    </MudStack>
                </ToolBarContent>
                <RowTemplate>
                    <MudTd>
                        <MudTooltip Text="@context.Id.ToString()">
                            <MudIconButton Icon="@Icons.Material.Outlined.ContentCopy" Size="Size.Small" OnClick="@(() => CopyToClipboard(context.Id.ToString()))"/>
                        </MudTooltip>
                    </MudTd>
                    <MudTd>@context.FileName</MudTd>
                    <MudTd>
                        <MudTooltip Text="@context.FileHash">
                            @context.FileHash.Substring(0, Math.Min(context.FileHash.Length, 8))...
                        </MudTooltip>
                    </MudTd>
                    <MudTd>@(context.Server?.Name ?? "-")</MudTd>
                    <MudTd>@context.IconsCount</MudTd>
                    <MudTd>
                        <MudTooltip Text="@context.UploadDateTime.ToString()">
                            <MudIcon Icon="@Icons.Material.Outlined.CalendarMonth" Size="Size.Small"/>
                        </MudTooltip>
                    </MudTd>
                    <MudTd>@context.User.Pseudo</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50 }"/>
                </PagerContent>
            </MudTable>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private bool _isLoading;
    private List<User> _users = [];
    private List<Server> _servers = [];
    private List<ModUploadHistory> _modUploadHistories = [];
    private string _searchUser = "";
    private string _searchServer = "";

    protected override void OnInitialized()
    {
        if (ContextService.CurrentUser == null || !ContextService.CurrentUser.SuperAdmin)
        {
            Navigation.NavigateTo("/");
        }

        ContextService.OnContextChanged += StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.WhenAll(
                RetrieveUsers(),
                RetrieveServers(),
                RetrieveModUploadHistories()
            );
            StateHasChanged();
        }
    }

    public async Task ToggleCanUploadMod(User user)
    {
        user.CanUploadMod = !user.CanUploadMod;
        await DbContext.SaveChangesAsync();
    }

    public async Task RetrieveModUploadHistories() {
        _modUploadHistories = await ModUploadHistoryDbService.GetAllAsync();
    }

    private async Task RetrieveUsers() {
        _users = await UserDbService.GetAllAsync();
    }

    private async Task RetrieveServers() {
        _servers = await ServerDbService.GetAllAsync();
    }

    public void Dispose()
    {
        ContextService.OnContextChanged -= StateHasChanged;
    }

    private async Task CopyToClipboard(string text)
    {
        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        Snackbar.Add(LocalizationService.GetTranslation("SuperAdmin.SnackbarCopy"), Severity.Info);
    }

    private async Task ToggleSuperAdmin(User user)
    {
        if (user == ContextService.CurrentUser)
        {
            Snackbar.Add(LocalizationService.GetTranslation("SuperAdmin.SnackbarCantEdit"), Severity.Error);
            return;
        }

        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", user.SuperAdmin ? LocalizationService.GetTranslation("SuperAdmin.ConfirmSuperAdminDemote") : LocalizationService.GetTranslation("SuperAdmin.ConfirmSuperAdminPromote"));

        if (confirmed)
        {
            var confirmedTwice = await JsRuntime.InvokeAsync<bool>("confirm", LocalizationService.GetTranslation("SuperAdmin.ConfirmTwiceSuperAdmin"));

            if (confirmedTwice)
            {
                user.SuperAdmin = !user.SuperAdmin;
                await DbContext.SaveChangesAsync();
                StateHasChanged();
            }
        }
    }

    private async Task ToggleDefault(Server server)
    {
        server.IsDefault = !server.IsDefault;
        await DbContext.SaveChangesAsync();
        await RetrieveUsers();
        StateHasChanged();
    }

    private bool SearchUser(User user)
    {
        if (string.IsNullOrWhiteSpace(_searchUser))
            return true;
        if (user.Pseudo.Contains(_searchUser, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.Id.ToString().Contains(_searchUser, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private bool SearchServer(Server server)
    {
        if (string.IsNullOrWhiteSpace(_searchServer))
            return true;
        if (server.Name.Contains(_searchServer, StringComparison.OrdinalIgnoreCase))
            return true;
        if (server.Id.ToString().Contains(_searchServer, StringComparison.OrdinalIgnoreCase))
            return true;
        if (server.UserServers.Where(us => us.IsAdmin).Select(us => us.User.Pseudo).Any(p => p.Contains(_searchServer, StringComparison.OrdinalIgnoreCase)))
            return true;
        return false;
    }

    private async Task DeleteUser(User user)
    {
        if (user == ContextService.CurrentUser)
        {
            Snackbar.Add(LocalizationService.GetTranslation("SuperAdmin.SnackBar.CantDeleteYourself"), Severity.Error);
            return;
        }

        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", LocalizationService.GetTranslation("SuperAdmin.ConfirmUserDeletion", user.Pseudo));

        if (confirmed)
        {
            _isLoading = true;
            StateHasChanged();
            UserDbService.Delete(user);
            await DbContext.SaveChangesAsync();
            await RetrieveUsers();
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ToggleSelfAdmin(Server server)
    {
        var currentUserServer = ContextService.CurrentUser!.UserServers.FirstOrDefault(us => us.Server == server);

        if (currentUserServer is not null)
        {
            currentUserServer.IsAdmin = !currentUserServer.IsAdmin;

            await DbContext.SaveChangesAsync();
        }
        else
        {
            await ContextService.JoinServer(server, true);
        }

        await RetrieveServers();
        ContextService.InvokeContextChanged();
    }

    private async Task DeleteServer(Server server)
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", LocalizationService.GetTranslation("SuperAdmin.ConfirmServerDeletion", server.Name));

        if (confirmed)
        {
            _isLoading = true;
            StateHasChanged();
            ServerDbService.Delete(server);
            await DbContext.SaveChangesAsync();
            await RetrieveServers();
            _isLoading = false;
            StateHasChanged();
        }
    }
}
