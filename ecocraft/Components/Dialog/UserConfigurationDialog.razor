@using ecocraft.Models
@using ecocraft.Services
@inject ContextService ContextService
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject EcoCraftDbContext EcoCraftDbContext


<MudDialog>
	<TitleContent>
		<MudText Typo="Typo.h4" Align="Align.Center">User settings</MudText>
	</TitleContent>
	<DialogContent>

		<MudTextField Value="ContextService.CurrentUser!.Pseudo" Variant="Variant.Outlined" Label="Pseudo" ValueChanged="@((string pseudo) => OnUpdateUserName(pseudo))"/>

		<MudTabs Outlined="true" Position="@Position.Top" Rounded="true" Border="true" ApplyEffectsToContainer="true" Class="mt-8" PanelClass="pa-6">
			<MudTabPanel Text="My servers">
				<MudTable Items="ContextService.CurrentUser!.UserServers" Dense="true">
					<ColGroup>
						<col />
						<col style="width: 160px;" />
						<col />
						<col style="width: 160px;" />
					</ColGroup>
					<HeaderContent>
						<MudTh><MudText>Name</MudText></MudTh>
						<MudTh><MudText>Join code</MudText></MudTh>
						<MudTh><MudText>In-Game pseudo</MudText></MudTh>
						<MudTh></MudTh>
					</HeaderContent>
					<RowTemplate>
						<MudTd>
							<MudText>@context.Server.Name</MudText>
						</MudTd>
						<MudTd>
							<MudTextField Value="context.Server.JoinCode" Underline="false" Variant="Variant.Text" ReadOnly="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Outlined.ContentCopy" OnAdornmentClick="@(() => CopyToClipboard(context.Server.JoinCode))" AdornmentAriaLabel="Copy to clipboard"></MudTextField>
						</MudTd>
						<MudTd>
							<MudTextField Margin="Margin.Dense" Value="@context.Pseudo" Variant="Variant.Outlined" ValueChanged="(string newPseudo) => OnPseudoChanged(context,newPseudo)" > </MudTextField>
						</MudTd>
						<MudTd>
							<MudStack Row AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="0">
								@if (_askLeaveConfirmations.ContainsKey(context))
								{
									<MudIconButton
												Color="Color.Success"
												Icon="@Icons.Material.Filled.Close"
												OnClick="@(() => CancelLeaveServer(context))">
									</MudIconButton>
								}
								<MudIconButton Color="Color.Error"
												Icon="@Icons.Material.Filled.ExitToApp"
												OnClick="@(() => LeaveServer(context))">
								</MudIconButton>
								@if (_askLeaveConfirmations.ContainsKey(context))
								{

									<MudIconButton
												Color="Color.Warning"
												Icon="@Icons.Material.Filled.Check"
												OnClick="@(() => ConfirmLeaveServer(context))">
									</MudIconButton>
								}
							</MudStack>
						</MudTd>
					</RowTemplate>
				</MudTable>
			</MudTabPanel>
			<MudTabPanel Text="Options">
				<MudText>UserSettings : we are working on !</MudText>
			</MudTabPanel>
		</MudTabs>
	</DialogContent>
	<DialogActions>
		<MudButton OnClick="Cancel" Color="Color.Secondary">Annuler</MudButton>
	</DialogActions>
</MudDialog>



@code {
	private Dictionary<UserServer, bool> _askLeaveConfirmations = new Dictionary<UserServer, bool>();

	[CascadingParameter]
	private MudDialogInstance MudDialog { get; set; }

	private void Submit()
	{
		MudDialog.Close();
	}

	private void Cancel()
	{
		MudDialog.Cancel();
	}

	private async Task OnPseudoChanged(UserServer userServer, string newPseudo)
	{
		if (newPseudo == "") return;
		userServer.Pseudo = newPseudo;
		await ContextService.updateCurrentUser();
	}

	private void LeaveServer(UserServer userServer)
	{
		if (!_askLeaveConfirmations.ContainsKey(userServer))
		{
			_askLeaveConfirmations.Add(userServer, true);
		}
	}

	private void CancelLeaveServer(UserServer userServer)
	{
		if (_askLeaveConfirmations.ContainsKey(userServer))
		{
			_askLeaveConfirmations.Remove(userServer);
		}
	}

	private async void ConfirmLeaveServer(UserServer userServerToLeave)
	{
		if (_askLeaveConfirmations.ContainsKey(userServerToLeave))
		{
			_askLeaveConfirmations.Remove(userServerToLeave);
			await ContextService.LeaveServer(userServerToLeave);
			await ContextService.ChangeServer(ContextService.CurrentUser!.UserServers.FirstOrDefault()?.Server);
		}
	}

	private async Task CopyToClipboard(string text)
	{
		await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
		Snackbar.Add("Join code copied to clipboard", Severity.Info);
	}

	private async Task OnUpdateUserName(string newPseudo)
	{
		ContextService.CurrentUser!.Pseudo = newPseudo;
		await EcoCraftDbContext.SaveChangesAsync();
		ContextService.InvokeContextChanged();
		//StateHasChanged();
	}
}
